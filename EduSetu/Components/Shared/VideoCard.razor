@using EduSetu.Components.Shared

<div class="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 overflow-hidden hover:shadow-md transition-shadow">
    <div class="relative">
        <img src="@Video.Thumbnail" alt="@Video.Title" class="w-full h-48 object-cover" />
        <div class="absolute inset-0 bg-black bg-opacity-20 flex items-center justify-center opacity-0 hover:opacity-100 transition-opacity">
            <button @onclick="() => OnView.InvokeAsync(Video)" 
                    class="bg-white bg-opacity-90 dark:bg-gray-700/90 p-3 rounded-full hover:bg-opacity-100 dark:hover:bg-gray-700 transition-all">
                <svg class="w-6 h-6 text-gray-800 dark:text-white" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M8 5v14l11-7z"/>
                </svg>
            </button>
        </div>
        <div class="absolute top-2 right-2 bg-black bg-opacity-75 dark:bg-gray-900/75 text-white text-xs px-2 py-1 rounded">
            @Video.Duration
        </div>
        @if (Video.IsPremium)
        {
            <div class="absolute top-2 left-2 bg-yellow-500 text-white text-xs px-2 py-1 rounded">
                Premium
            </div>
        }
    </div>

    <div class="p-4">
        <div class="flex items-start justify-between mb-2">
            <h3 class="font-semibold text-gray-800 dark:text-white line-clamp-2">@Video.Title</h3>
            @if (Video.IsVerified)
            {
                <svg class="w-4 h-4 text-green-500 dark:text-green-400 flex-shrink-0 ml-2" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"/>
                </svg>
            }
        </div>

        <p class="text-gray-600 dark:text-gray-400 text-sm mb-3 line-clamp-2">@Video.Description</p>

        <div class="flex items-center justify-between text-sm text-gray-500 dark:text-gray-400 mb-3">
            <span>@Video.Instructor</span>
            <span>@Video.Level</span>
        </div>

        <div class="flex items-center justify-between">
            <div class="flex items-center gap-1">
                <svg class="w-4 h-4 text-yellow-400" fill="currentColor" viewBox="0 0 24 24">
                    <path d="M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z"/>
                </svg>
                <span class="font-medium text-gray-700 dark:text-gray-300">@Video.Rating.ToString("F1")</span>
                <span class="text-gray-500 dark:text-gray-400">(@Video.TotalRatings)</span>
            </div>

            <div class="flex items-center gap-2">
                <button @onclick="() => OnView.InvokeAsync(Video)" 
                        class="text-primary-600 dark:text-primary-400 hover:text-primary-700 dark:hover:text-primary-300 font-medium text-sm">
                    Watch
                </button>
                <button @onclick="() => OnDownload.InvokeAsync(Video)" 
                        class="text-gray-500 dark:text-gray-400 hover:text-gray-700 dark:hover:text-gray-300">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                    </svg>
                </button>
            </div>
        </div>

        <div class="flex items-center justify-between text-xs text-gray-400 dark:text-gray-500 mt-2">
            <span>@Video.Views views</span>
            <span>@Video.Quality</span>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public Video Video { get; set; } = new();

    [Parameter]
    public EventCallback<Video> OnView { get; set; }

    [Parameter]
    public EventCallback<Video> OnDownload { get; set; }
}