@using System.ComponentModel.DataAnnotations

<div class="w-full lg:w-80 space-y-6">
    <!-- Categories -->
    <div class="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
        <div class="flex items-center justify-between cursor-pointer mb-4" @onclick="@(() => ToggleSection("categories"))">
            <h2 class="text-xl font-semibold text-gray-800 flex items-center gap-2">
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4a1 1 0 011-1h16a1 1 0 011 1v2.586a1 1 0 01-.293.707l-6.414 6.414a1 1 0 00-.293.707V17l-4 4v-6.586a1 1 0 00-.293-.707L3.293 7.207A1 1 0 013 6.5V4z"></path>
                </svg>
                Browse Categories
            </h2>
            @if (IsExpanded("categories"))
            {
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 15l7-7 7 7"></path>
                </svg>
            }
            else
            {
                <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                </svg>
            }
        </div>

        @if (IsExpanded("categories"))
        {
            <div class="space-y-3">
                @foreach (var category in categories)
                {
                    <button @onclick="() => OnCategorySelect.InvokeAsync(category.Id)"
                            class="@($"w-full flex items-center gap-3 px-4 py-4 rounded-lg transition-colors text-left {(SelectedCategory == category.Id ? "bg-primary-50 text-primary-700 border border-primary-200" : "hover:bg-gray-50 text-gray-700 border border-transparent")}")">
                        <div class="p-2 rounded-lg bg-white shadow-sm">
                            @GetCategoryIcon(category.Id)
                        </div>
                        <div class="flex-1">
                            <div class="font-medium">@category.Name</div>
                            <div class="text-xs text-gray-500 mt-1">@category.Description</div>
                        </div>
                        <span class="text-sm bg-gray-200 text-gray-600 px-2 py-1 rounded-full">
                            @category.Count
                        </span>
                    </button>
                }
            </div>
        }

        @if (!string.IsNullOrEmpty(SelectedCategory))
        {
            <div class="mt-6 p-4 bg-gray-50 rounded-lg">
                <h3 class="text-sm font-medium text-gray-700 mb-2">
                    Selected Category
                </h3>
                <div class="flex items-center gap-2">
                    @GetCategoryIcon(SelectedCategory)
                    <span class="text-sm text-primary-700 font-medium">
                        @categories.FirstOrDefault(c => c.Id == SelectedCategory)?.Name
                    </span>
                </div>
                <button @onclick="@(() => OnCategorySelect.InvokeAsync(""))"
                        class="mt-2 text-xs text-gray-500 hover:text-gray-700">
                    Clear selection
                </button>
            </div>
        }
    </div>

    <!-- Filters -->
    @foreach (var section in filterSections)
    {
        <div class="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
            <div class="flex items-center justify-between cursor-pointer mb-4" @onclick="() => ToggleSection(section.Id)">
                <h3 class="text-lg font-semibold text-gray-800">@(section.Title)</h3>
                @if (IsExpanded(section.Id))
                {
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 15l7-7 7 7"></path>
                    </svg>
                }
                else
                {
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                    </svg>
                }
            </div>

            @if (IsExpanded(section.Id))
            {
                <div class="space-y-4">
                    @foreach (var filter in section.Filters)
                    {
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">
                                @filter.Label
                            </label>
                            @if (filter.Type == "checkbox")
                            {
                                <label class="flex items-center gap-2 cursor-pointer">
                                    <input type="checkbox" checked="@(Filters.ContainsKey(filter.Key) && Filters[filter.Key] == "true")"
                                           @onchange="(e) => OnFilterChange.InvokeAsync((filter.Key, e.Value.ToString()))"
                                           class="w-4 h-4 text-primary-600 focus:ring-primary-500 border-gray-300 rounded" />
                                    <span class="text-sm text-gray-700">@filter.Label</span>
                                </label>
                            }
                            else
                            {
                                <select @bind="Filters[filter.Key]" @bind:after="() => OnFilterChange.InvokeAsync((filter.Key, Filters[filter.Key]))"
                                        class="w-full p-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-primary-500 focus:border-primary-500 text-sm">
                                    <option value="">All @filter.Label</option>
                                    @if (FilterOptions.ContainsKey(filter.Key))
                                    {
                                        @foreach (var option in FilterOptions[filter.Key])
                                        {
                                            <option value="@option">@option</option>
                                        }
                                    }
                                </select>
                            }
                        </div>
                    }
                </div>
            }
        </div>
    }

    <!-- Clear Filters -->
    @if (Filters.Any(f => !string.IsNullOrEmpty(f.Value)))
    {
        <div class="bg-white rounded-xl shadow-sm border border-gray-200 p-6">
            <button @onclick="() => OnClearFilters.InvokeAsync()"
                    class="w-full bg-gray-100 hover:bg-gray-200 text-gray-700 px-4 py-3 rounded-lg font-medium transition-colors">
                Clear All Filters
            </button>
        </div>
    }

    <!-- Quick Stats -->
    <div class="bg-gradient-to-br from-primary-50 to-secondary-50 rounded-xl border border-primary-200 p-6">
        <h3 class="text-lg font-semibold text-gray-800 mb-4">Quick Stats</h3>
        <div class="space-y-3">
            <div class="flex justify-between items-center">
                <span class="text-sm text-gray-600">Total Videos</span>
                <span class="font-semibold text-gray-800">245</span>
            </div>
            <div class="flex justify-between items-center">
                <span class="text-sm text-gray-600">Physics</span>
                <span class="font-semibold text-gray-800">67</span>
            </div>
            <div class="flex justify-between items-center">
                <span class="text-sm text-gray-600">Chemistry</span>
                <span class="font-semibold text-gray-800">54</span>
            </div>
            <div class="flex justify-between items-center">
                <span class="text-sm text-gray-600">Mathematics</span>
                <span class="font-semibold text-gray-800">43</span>
            </div>
            <div class="flex justify-between items-center">
                <span class="text-sm text-gray-600">Computer Science</span>
                <span class="font-semibold text-gray-800">38</span>
            </div>
            <div class="flex justify-between items-center">
                <span class="text-sm text-gray-600">Avg. Rating</span>
                <span class="font-semibold text-gray-800">4.7/5</span>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string SelectedCategory { get; set; } = "";

    [Parameter]
    public EventCallback<string> OnCategorySelect { get; set; }

    [Parameter]
    public Dictionary<string, string> Filters { get; set; } = new();

    [Parameter]
    public Dictionary<string, List<string>> FilterOptions { get; set; } = new();

    [Parameter]
    public EventCallback<(string, string)> OnFilterChange { get; set; }

    [Parameter]
    public EventCallback OnClearFilters { get; set; }

    private List<string> expandedSections = new() { "categories" };

    private readonly List<Category> categories = new()
    {
        new Category { Id = "physics", Name = "Physics", Count = 67, Description = "Mechanics, Thermodynamics, Optics" },
        new Category { Id = "chemistry", Name = "Chemistry", Count = 54, Description = "Organic, Inorganic, Physical" },
        new Category { Id = "mathematics", Name = "Mathematics", Count = 43, Description = "Algebra, Calculus, Geometry" },
        new Category { Id = "computer-science", Name = "Computer Science", Count = 38, Description = "Programming, Data Structures" },
        new Category { Id = "biology", Name = "Biology", Count = 32, Description = "Botany, Zoology, Human Biology" },
        new Category { Id = "english", Name = "English", Count = 11, Description = "Grammar, Literature, Communication" }
    };

    private readonly List<FilterSection> filterSections = new()
    {
        new FilterSection
        {
            Id = "content",
            Title = "Content Filters",
            Filters = new List<Filter>
            {
                new Filter { Key = "instructor", Label = "Instructor", Type = "select" },
                new Filter { Key = "level", Label = "Level", Type = "select" },
                new Filter { Key = "duration", Label = "Duration", Type = "select" },
                new Filter { Key = "language", Label = "Language", Type = "select" }
            }
        },
        new FilterSection
        {
            Id = "quality",
            Title = "Quality Filters",
            Filters = new List<Filter>
            {
                new Filter { Key = "quality", Label = "Video Quality", Type = "select" },
                new Filter { Key = "verified", Label = "Verified Only", Type = "checkbox" },
                new Filter { Key = "premium", Label = "Premium Content", Type = "checkbox" }
            }
        }
    };

    private void ToggleSection(string sectionId)
    {
        if (expandedSections.Contains(sectionId))
        {
            expandedSections.Remove(sectionId);
        }
        else
        {
            expandedSections.Add(sectionId);
        }
    }

    private bool IsExpanded(string sectionId)
    {
        return expandedSections.Contains(sectionId);
    }

    private RenderFragment GetCategoryIcon(string categoryId)
    {
        return categoryId switch
        {
            "physics" => @<svg class="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
            </svg>,
            "chemistry" => @<svg class="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19.428 15.428a2 2 0 00-1.022-.547l-2.387-.477a6 6 0 00-3.86.517l-.318.158a6 6 0 01-3.86.517L6.05 15.21a2 2 0 00-1.806.547M8 4h8l-1 1v5.172a2 2 0 00.586 1.414l5 5c1.26 1.26.367 3.414-1.415 3.414H4.828c-1.782 0-2.674-2.154-1.414-3.414l5-5A2 2 0 009 10.172V5L8 4z"></path>
            </svg>,
            "mathematics" => @<svg class="w-5 h-5 text-purple-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 7h6m0 10v-3m-3 3h.01M9 17h.01M9 14h.01M12 14h.01M15 11h.01M12 11h.01M9 11h.01M7 21h10a2 2 0 002-2V5a2 2 0 00-2-2H7a2 2 0 00-2 2v14a2 2 0 002 2z"></path>
            </svg>,
            "computer-science" => @<svg class="w-5 h-5 text-orange-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10 20l4-16m4 4l4 4-4 4M6 16l-4-4 4-4"></path>
            </svg>,
            "biology" => @<svg class="w-5 h-5 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"></path>
            </svg>,
            "english" => @<svg class="w-5 h-5 text-indigo-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.747 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"></path>
            </svg>,
            _ => @<svg class="w-5 h-5 text-gray-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
            </svg>
        };
    }

    public class Category
    {
        public string Id { get; set; } = "";
        public string Name { get; set; } = "";
        public int Count { get; set; }
        public string Description { get; set; } = "";
    }

    public class FilterSection
    {
        public string Id { get; set; } = "";
        public string Title { get; set; } = "";
        public List<Filter> Filters { get; set; } = new();
    }

    public class Filter
    {
        public string Key { get; set; } = "";
        public string Label { get; set; } = "";
        public string Type { get; set; } = "select";
    }
} 