@page "/search"
@using System.ComponentModel.DataAnnotations
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>Search Results - EduSetu</PageTitle>

<div class="min-h-screen bg-gray-50 dark:bg-gray-900 pt-16">
    <div class="container mx-auto px-4 py-8">
        @if (isLoading)
        {
            <div class="flex items-center justify-center min-h-[400px]">
                <div class="text-center">
                    <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600 dark:border-primary-400 mx-auto mb-4"></div>
                    <p class="text-gray-600 dark:text-gray-400">Searching for results...</p>
                </div>
            </div>
        }
        else
        {
            <div class="mb-8">
                <div class="flex items-center gap-3 mb-4">
                    <div class="p-3 bg-primary-100 dark:bg-primary-900 rounded-xl">
                        <svg class="w-8 h-8 text-primary-600 dark:text-primary-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                        </svg>
                    </div>
                    <div>
                        <h1 class="text-4xl font-bold text-gray-800 dark:text-white">Search Results</h1>
                        <p class="text-gray-600 dark:text-gray-400 mt-1">
                            @(searchQuery != null ? $"Results for \"{searchQuery}\"" : "Browse all study materials")
                        </p>
                    </div>
                </div>
            </div>

            <div class="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-6 mb-6">
                <form @onsubmit="HandleNewSearch" class="mb-4">
                    <div class="relative">
                        <input type="text"
                               @bind="searchQuery"
                               placeholder="Search for notes, videos, or previous year papers..."
                               class="w-full pl-12 pr-32 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-primary-500 transition-colors bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400" />
                        <svg class="absolute left-4 top-3.5 text-gray-400 dark:text-gray-500 w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                        </svg>
                        <button type="submit"
                                class="absolute right-2 top-1.5 bg-primary-600 dark:bg-primary-700 hover:bg-primary-700 dark:hover:bg-primary-800 text-white px-6 py-2 rounded-lg font-medium transition-colors">
                            Search
                        </button>
                    </div>
                </form>

                <div class="flex flex-col sm:flex-row sm:items-center justify-between gap-4">
                    <div class="flex items-center gap-4">
                        <select @bind="filterType" @bind:after="ApplyFiltersAndSorting" class="px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:ring-2 focus:ring-primary-500 focus:border-primary-500 text-sm bg-white dark:bg-gray-700 text-gray-900 dark:text-white">
                            <option value="">All Types</option>
                            <option value="notes">Notes</option>
                            <option value="video">Videos</option>
                            <option value="pyq">PYQs</option>
                        </select>

                        <select @bind="filterSubject" @bind:after="ApplyFiltersAndSorting" class="px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:ring-2 focus:ring-primary-500 focus:border-primary-500 text-sm bg-white dark:bg-gray-700 text-gray-900 dark:text-white">
                            <option value="">All Subjects</option>
                            @foreach (var subject in uniqueSubjects)
                            {
                                <option value="@subject">@subject</option>
                            }
                        </select>

                        <div class="flex items-center gap-2 bg-gray-100 dark:bg-gray-700 rounded-lg p-1">
                            <button @onclick="@(() => SetViewMode("grid"))" 
                                    class="p-2 rounded-md transition-colors @(viewMode == "grid" ? "bg-white dark:bg-gray-800 text-gray-800 dark:text-white shadow-sm" : "text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-white")">
                                <svg class="w-4.5 h-4.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z"></path>
                                </svg>
                            </button>
                            <button @onclick="@(() => SetViewMode("list"))" 
                                    class="p-2 rounded-md transition-colors @(viewMode == "list" ? "bg-white dark:bg-gray-800 text-gray-800 dark:text-white shadow-sm" : "text-gray-600 dark:text-gray-400 hover:text-gray-800 dark:hover:text-white")">
                                <svg class="w-4.5 h-4.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 10h16M4 14h16M4 18h16"></path>
                                </svg>
                            </button>
                        </div>
                    </div>

                    <div class="flex items-center gap-4">
                        <div class="flex items-center gap-2">
                            <label class="text-sm font-medium text-gray-700 dark:text-gray-300">Sort by:</label>
                            <select @bind="sortBy" @bind:after="ApplyFiltersAndSorting" class="px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md focus:ring-2 focus:ring-primary-500 focus:border-primary-500 text-sm bg-white dark:bg-gray-700 text-gray-900 dark:text-white">
                                <option value="relevance">Relevance</option>
                                <option value="newest">Newest</option>
                                <option value="popular">Most Popular</option>
                                <option value="rating">Highest Rated</option>
                            </select>
                            <button @onclick="ToggleSortOrder" 
                                    class="p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-md transition-colors text-gray-600 dark:text-gray-400" 
                                    title="@($"Sort {(sortOrder == "asc" ? "Ascending" : "Descending")}")">
                                @if (sortOrder == "asc")
                                {
                                    <svg class="w-4.5 h-4.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4h13M3 8h9m-9 4h6m4 0l4-4m0 0l4 4m-4-4v12"></path>
                                    </svg>
                                }
                                else
                                {
                                    <svg class="w-4.5 h-4.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 4h13M3 8h9m-9 4h9m5-4v12m0 0l-4-4m4 4l4-4"></path>
                                    </svg>
                                }
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <div class="mb-6 flex items-center justify-between">
                <p class="text-gray-600 dark:text-gray-400">
                    Showing @(startIndex + 1)-@(Math.Min(endIndex, filteredResults.Count)) of @filteredResults.Count results
                </p>
                
                @if (totalPages > 1)
                {
                    <p class="text-sm text-gray-500 dark:text-gray-400">
                        Page @currentPage of @totalPages
                    </p>
                }
            </div>

            @if (currentResults.Count > 0)
            {
                @if (viewMode == "grid")
                {
                    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-8">
                        @foreach (var result in currentResults)
                        {
                            <div class="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 overflow-hidden hover:shadow-md transition-all duration-200">
                                <div class="relative h-48 overflow-hidden">
                                    <img src="@result.Thumbnail" alt="@result.Title" class="w-full h-full object-cover" />
                                    <div class="absolute inset-0 bg-gradient-to-t from-black/20 to-transparent"></div>
                                    
                                    <div class="absolute top-3 right-3 px-2 py-1 rounded-full text-xs font-medium border @GetTypeColor(result.Type)">
                                        <div class="flex items-center gap-1">
                                            @GetTypeIcon(result.Type)
                                            <span class="capitalize">@result.Type</span>
                                        </div>
                                    </div>

                                    @if (!string.IsNullOrEmpty(result.Duration))
                                    {
                                        <div class="absolute bottom-3 right-3 bg-black/70 dark:bg-gray-900/70 text-white text-xs px-2 py-1 rounded">
                                            @result.Duration
                                        </div>
                                    }
                                </div>

                                <div class="p-6">
                                    <h3 class="font-semibold text-lg mb-2 text-gray-800 dark:text-white line-clamp-2">
                                        @result.Title
                                    </h3>
                                    
                                    <p class="text-sm text-gray-600 dark:text-gray-400 mb-3">
                                        @result.Subject • @result.Course
                                    </p>

                                    <p class="text-gray-600 dark:text-gray-400 text-sm mb-4 line-clamp-2">
                                        @result.Description
                                    </p>

                                    <div class="flex items-center justify-between text-sm text-gray-500 dark:text-gray-400 mb-4">
                                        <span class="flex items-center gap-1">
                                            <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                                            </svg>
                                            @result.Author
                                        </span>
                                        <span class="flex items-center gap-1">
                                            <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                            </svg>
                                            @FormatDate(result.UploadDate)
                                        </span>
                                    </div>

                                    <div class="flex items-center justify-between">
                                        <div class="flex items-center gap-3 text-sm text-gray-500 dark:text-gray-400">
                                            <span class="flex items-center gap-1">
                                                <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                                                </svg>
                                                @result.Views.ToString("N0")
                                            </span>
                                            @if (result.Downloads.HasValue)
                                            {
                                                <span class="flex items-center gap-1">
                                                    <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                                                    </svg>
                                                    @result.Downloads.Value.ToString("N0")
                                                </span>
                                            }
                                            <span class="flex items-center gap-1">
                                                <svg class="w-3 h-3 text-yellow-400 fill-current" fill="currentColor" viewBox="0 0 24 24">
                                                    <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"></path>
                                                </svg>
                                                <span class="text-gray-700 dark:text-gray-300">@result.Rating</span>
                                            </span>
                                        </div>
                                        
                                        <button @onclick="@(() => ViewResult(result))" class="bg-primary-600 dark:bg-primary-700 hover:bg-primary-700 dark:hover:bg-primary-800 text-white px-4 py-2 rounded-lg text-sm font-medium transition-colors">
                                            @(result.Type == "video" ? "Watch" : "View")
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="space-y-4 mb-8">
                        @foreach (var result in currentResults)
                        {
                            <div class="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-6 hover:shadow-md transition-all duration-200">
                                <div class="flex gap-6">
                                    <div class="w-32 h-20 flex-shrink-0 overflow-hidden rounded-lg">
                                        <img src="@result.Thumbnail" alt="@result.Title" class="w-full h-full object-cover" />
                                    </div>

                                    <div class="flex-1 min-w-0">
                                        <div class="flex items-start justify-between mb-2">
                                            <div class="flex-1">
                                                <div class="flex items-center gap-2 mb-1">
                                                    <span class="px-2 py-1 rounded-full text-xs font-medium border @GetTypeColor(result.Type)">
                                                        <div class="flex items-center gap-1">
                                                            @GetTypeIcon(result.Type)
                                                            <span class="capitalize">@result.Type</span>
                                                        </div>
                                                    </span>
                                                </div>
                                                
                                                <h3 class="font-semibold text-lg text-gray-800 dark:text-white mb-1">
                                                    @result.Title
                                                </h3>
                                                
                                                <p class="text-sm text-gray-600 dark:text-gray-400 mb-2">
                                                    @result.Subject • @result.Course
                                                </p>

                                                <p class="text-gray-600 dark:text-gray-400 text-sm mb-3 line-clamp-2">
                                                    @result.Description
                                                </p>
                                            </div>

                                            <div class="flex items-center gap-4 text-sm text-gray-500 dark:text-gray-400 ml-4">
                                                <span class="flex items-center gap-1">
                                                    <svg class="w-3.5 h-3.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5c4.478 0 8.268 2.943 9.542 7-1.274 4.057-5.064 7-9.542 7-4.477 0-8.268-2.943-9.542-7z"></path>
                                                    </svg>
                                                    @result.Views.ToString("N0")
                                                </span>
                                                @if (result.Downloads.HasValue)
                                                {
                                                    <span class="flex items-center gap-1">
                                                        <svg class="w-3.5 h-3.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                                                        </svg>
                                                        @result.Downloads.Value.ToString("N0")
                                                    </span>
                                                }
                                                <span class="flex items-center gap-1">
                                                    <svg class="w-3.5 h-3.5 text-yellow-400 fill-current" fill="currentColor" viewBox="0 0 24 24">
                                                        <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"></path>
                                                    </svg>
                                                    <span class="text-gray-700 dark:text-gray-300">@result.Rating</span>
                                                </span>
                                            </div>
                                        </div>

                                        <div class="flex items-center justify-between">
                                            <div class="flex items-center gap-4 text-xs text-gray-500 dark:text-gray-400">
                                                <span class="flex items-center gap-1">
                                                    <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                                                    </svg>
                                                    @result.Author
                                                </span>
                                                <span class="flex items-center gap-1">
                                                    <svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                                    </svg>
                                                    @FormatDate(result.UploadDate)
                                                </span>
                                                @if (!string.IsNullOrEmpty(result.Duration))
                                                {
                                                    <span>@result.Duration</span>
                                                }
                                            </div>

                                            <button @onclick="@(() => ViewResult(result))" class="bg-primary-600 dark:bg-primary-700 hover:bg-primary-700 dark:hover:bg-primary-800 text-white px-6 py-2 rounded-lg font-medium transition-colors">
                                                @(result.Type == "video" ? "Watch" : "View")
                                            </button>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }

                @if (totalPages > 1)
                {
                    <div class="flex items-center justify-center gap-2 mt-8">
                        <button @onclick="@(() => SetCurrentPage(currentPage - 1))"
                                disabled="@(currentPage == 1)"
                                class="flex items-center gap-2 px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors text-gray-700 dark:text-gray-300">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                            </svg>
                            Previous
                        </button>

                        <div class="flex items-center gap-1">
                            @foreach (var page in GetPageNumbers())
                            {
                                @if (page == "...")
                                {
                                    <span class="px-3 py-2 text-gray-500 dark:text-gray-400">...</span>
                                }
                                else
                                {
                                    <button @onclick="@(() => SetCurrentPage((int)page))"
                                            class="px-3 py-2 rounded-lg transition-colors @(currentPage == (int)page ? "bg-primary-600 dark:bg-primary-700 text-white" : "hover:bg-gray-100 dark:hover:bg-gray-700 text-gray-700 dark:text-gray-300")">
                                        @(page)
                                    </button>
                                }
                            }
                        </div>

                        <button @onclick="@(() => SetCurrentPage(currentPage + 1))"
                                disabled="@(currentPage == totalPages)"
                                class="flex items-center gap-2 px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors text-gray-700 dark:text-gray-300">
                            Next
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                            </svg>
                        </button>
                    </div>
                }
            }
            else
            {
                <div class="text-center py-12">
                    <div class="mb-4">
                        <svg class="w-16 h-16 text-gray-400 dark:text-gray-500 mx-auto" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                        </svg>
                    </div>
                    <h3 class="text-xl font-semibold text-gray-800 dark:text-white mb-2">No results found</h3>
                    <p class="text-gray-600 dark:text-gray-400 mb-6">Try adjusting your search criteria or browse our categories below.</p>
                    <div class="flex flex-wrap justify-center gap-4">
                        <NavLink href="/notes" class="bg-primary-600 dark:bg-primary-700 hover:bg-primary-700 dark:hover:bg-primary-800 text-white px-6 py-3 rounded-lg font-medium transition-colors">
                            Browse Notes
                        </NavLink>
                        <NavLink href="/videos" class="bg-primary-600 dark:bg-primary-700 hover:bg-primary-700 dark:hover:bg-primary-800 text-white px-6 py-3 rounded-lg font-medium transition-colors">
                            Browse Videos
                        </NavLink>
                        <NavLink href="/pyqs" class="bg-primary-600 dark:bg-primary-700 hover:bg-primary-700 dark:hover:bg-primary-800 text-white px-6 py-3 rounded-lg font-medium transition-colors">
                            Browse PYQs
                        </NavLink>
                    </div>
                </div>
            }
        }
    </div>
</div>

@code {
    private string searchQuery = "";
    private List<SearchResult> results = new();
    private List<SearchResult> filteredResults = new();
    private string viewMode = "grid";
    private string sortBy = "relevance";
    private string sortOrder = "desc";
    private string filterType = "";
    private string filterSubject = "";
    private int currentPage = 1;
    private const int itemsPerPage = 12;
    private bool isLoading = true;
    private List<string> uniqueSubjects = new();

    protected override async Task OnInitializedAsync()
    {
        await LoadSearchResults();
    }

    private async Task LoadSearchResults()
    {
        isLoading = true;
        StateHasChanged();

        // Get search parameters from URL
        var uri = NavigationManager.ToAbsoluteUri(NavigationManager.Uri);
        var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(uri.Query);
        
        searchQuery = query.TryGetValue("q", out var q) ? q.First() ?? "" : "";
        var type = query.TryGetValue("type", out var t) ? t.First() ?? "" : "";
        var subject = query.TryGetValue("subject", out var s) ? s.First() ?? "" : "";
        var board = query.TryGetValue("board", out var b) ? b.First() ?? "" : "";
        var course = query.TryGetValue("course", out var c) ? c.First() ?? "" : "";
        var university = query.TryGetValue("university", out var u) ? u.First() ?? "" : "";

        // Simulate loading delay
        await Task.Delay(1000);

        // Load sample data
        LoadSampleData();

        // Filter results based on search parameters
        var filtered = results;

        if (!string.IsNullOrEmpty(searchQuery))
        {
            filtered = filtered.Where(result =>
                result.Title.ToLower().Contains(searchQuery.ToLower()) ||
                result.Description.ToLower().Contains(searchQuery.ToLower()) ||
                result.Tags.Any(tag => tag.ToLower().Contains(searchQuery.ToLower())) ||
                result.Subject.ToLower().Contains(searchQuery.ToLower())
            ).ToList();
        }

        if (!string.IsNullOrEmpty(type))
        {
            // Map institution type to content categories
            if (type.ToLower() == "school")
            {
                filtered = filtered.Where(result => result.Category == "Board").ToList();
            }
            else if (type.ToLower() == "university")
            {
                filtered = filtered.Where(result => result.Category == "University").ToList();
            }
        }

        if (!string.IsNullOrEmpty(subject))
        {
            filtered = filtered.Where(result => 
                result.Subject.ToLower() == subject.ToLower()
            ).ToList();
        }

        if (!string.IsNullOrEmpty(board) || !string.IsNullOrEmpty(course) || !string.IsNullOrEmpty(university))
        {
            filtered = filtered.Where(result => 
                result.Course.ToLower().Contains((board ?? course ?? university).ToLower())
            ).ToList();
        }

        results = filtered;
        filteredResults = filtered;
        uniqueSubjects = results.Select(r => r.Subject).Distinct().ToList();

        isLoading = false;
        StateHasChanged();
    }

    private void LoadSampleData()
    {
        results = new List<SearchResult>
        {
            new() {
                Id = "1",
                Title = "Data Structures Complete Notes",
                Type = "notes",
                Subject = "Computer Science",
                Course = "B.Tech Computer Science",
                Category = "University",
                Author = "Dr. Sarah Johnson",
                Description = "Comprehensive notes covering all fundamental data structures including arrays, linked lists, stacks, queues, trees, and graphs.",
                Thumbnail = "https://images.pexels.com/photos/4164418/pexels-photo-4164418.jpeg",
                Rating = 4.8,
                Views = 15420,
                Downloads = 2845,
                UploadDate = DateTime.Parse("2024-01-15"),
                Tags = new List<string> { "Data Structures", "Algorithms", "Programming", "Computer Science" }
            },
            new() {
                Id = "2",
                Title = "Machine Learning Fundamentals Video Course",
                Type = "video",
                Subject = "Computer Science",
                Course = "B.Tech Computer Science",
                Category = "University",
                Author = "Prof. Michael Chen",
                Description = "Complete video course covering machine learning algorithms, neural networks, and practical implementations.",
                Thumbnail = "https://images.pexels.com/photos/3861969/pexels-photo-3861969.jpeg",
                Rating = 4.9,
                Views = 32150,
                Duration = "6:20:15",
                UploadDate = DateTime.Parse("2024-01-10"),
                Tags = new List<string> { "Machine Learning", "AI", "Python", "Data Science" }
            },
            new() {
                Id = "3",
                Title = "Physics Class 12 Previous Year Questions",
                Type = "pyq",
                Subject = "Physics",
                Course = "Class 12",
                Category = "Board",
                Author = "CBSE Board",
                Description = "Collection of previous year physics questions for Class 12 CBSE board examinations.",
                Thumbnail = "https://images.pexels.com/photos/4778611/pexels-photo-4778611.jpeg",
                Rating = 4.7,
                Views = 28940,
                Downloads = 5680,
                UploadDate = DateTime.Parse("2024-01-08"),
                Tags = new List<string> { "Physics", "CBSE", "Class 12", "Previous Year Questions" }
            },
            new() {
                Id = "4",
                Title = "Mathematics Calculus Tutorial Series",
                Type = "video",
                Subject = "Mathematics",
                Course = "Class 12",
                Category = "Board",
                Author = "Dr. Priya Sharma",
                Description = "Step-by-step calculus tutorials covering limits, derivatives, and integrals with solved examples.",
                Thumbnail = "https://images.pexels.com/photos/3861969/pexels-photo-3861969.jpeg",
                Rating = 4.6,
                Views = 19850,
                Duration = "4:15:30",
                UploadDate = DateTime.Parse("2024-01-12"),
                Tags = new List<string> { "Mathematics", "Calculus", "Class 12", "Tutorial" }
            },
            new() {
                Id = "5",
                Title = "Chemistry Organic Compounds Notes",
                Type = "notes",
                Subject = "Chemistry",
                Course = "Class 12",
                Category = "Board",
                Author = "Dr. Rajesh Kumar",
                Description = "Detailed notes on organic chemistry covering hydrocarbons, alcohols, aldehydes, and ketones.",
                Thumbnail = "https://images.pexels.com/photos/4164418/pexels-photo-4164418.jpeg",
                Rating = 4.5,
                Views = 12340,
                Downloads = 1890,
                UploadDate = DateTime.Parse("2024-01-14"),
                Tags = new List<string> { "Chemistry", "Organic Chemistry", "Class 12", "CBSE" }
            },
            new() {
                Id = "6",
                Title = "Biology NEET Preparation Guide",
                Type = "notes",
                Subject = "Biology",
                Course = "NEET Preparation",
                Category = "Exam",
                Author = "Dr. Anita Verma",
                Description = "Comprehensive biology preparation guide for NEET with important topics and practice questions.",
                Thumbnail = "https://images.pexels.com/photos/4164418/pexels-photo-4164418.jpeg",
                Rating = 4.8,
                Views = 45670,
                Downloads = 8920,
                UploadDate = DateTime.Parse("2024-01-05"),
                Tags = new List<string> { "Biology", "NEET", "Medical Entrance", "Preparation" }
            }
        };
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            ApplyFiltersAndSorting();
        }
    }

    private void ApplyFiltersAndSorting()
    {
        var filtered = results;

        if (!string.IsNullOrEmpty(filterType))
        {
            filtered = filtered.Where(result => result.Type == filterType).ToList();
        }

        if (!string.IsNullOrEmpty(filterSubject))
        {
            filtered = filtered.Where(result => result.Subject == filterSubject).ToList();
        }

        // Sort results
        filtered = sortBy switch
        {
            "newest" => sortOrder == "asc" 
                ? filtered.OrderBy(r => r.UploadDate).ToList()
                : filtered.OrderByDescending(r => r.UploadDate).ToList(),
            "popular" => sortOrder == "asc"
                ? filtered.OrderBy(r => r.Views).ToList()
                : filtered.OrderByDescending(r => r.Views).ToList(),
            "rating" => sortOrder == "asc"
                ? filtered.OrderBy(r => r.Rating).ToList()
                : filtered.OrderByDescending(r => r.Rating).ToList(),
            _ => sortOrder == "asc"
                ? filtered.OrderBy(r => r.Title.ToLower().Contains(searchQuery.ToLower()) ? 0 : 1).ToList()
                : filtered.OrderByDescending(r => r.Title.ToLower().Contains(searchQuery.ToLower()) ? 1 : 0).ToList()
        };

        filteredResults = filtered;
        currentPage = 1;
        StateHasChanged();
    }

    private void HandleNewSearch()
    {
        if (!string.IsNullOrEmpty(searchQuery.Trim()))
        {
            var searchUrl = $"/search?q={Uri.EscapeDataString(searchQuery.Trim())}";
            NavigationManager.NavigateTo(searchUrl);
        }
    }

    private void SetViewMode(string mode)
    {
        viewMode = mode;
        StateHasChanged();
    }

    private void ToggleSortOrder()
    {
        sortOrder = sortOrder == "asc" ? "desc" : "asc";
        ApplyFiltersAndSorting();
    }

    private void SetCurrentPage(int page)
    {
        currentPage = page;
        StateHasChanged();
    }

    private void ViewResult(SearchResult result)
    {
        var url = result.Type switch
        {
            "notes" => $"/notes/{result.Id}",
            "video" => $"/videos/{result.Id}",
            "pyq" => $"/pyqs/{result.Id}",
            _ => $"/search/{result.Id}"
        };
        NavigationManager.NavigateTo(url);
    }

    private RenderFragment GetTypeIcon(string type)
    {
        return type switch
        {
            "notes" => @<svg class="w-4 h-4 text-blue-600 dark:text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"></path>
            </svg>,
            "video" => @<svg class="w-4 h-4 text-red-600 dark:text-red-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z"></path>
            </svg>,
            "pyq" => @<svg class="w-4 h-4 text-green-600 dark:text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
            </svg>,
            _ => @<svg class="w-4 h-4 text-gray-600 dark:text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
            </svg>
        };
    }

    private string GetTypeColor(string type)
    {
        return type switch
        {
            "notes" => "bg-blue-50 text-blue-700 border-blue-200 dark:bg-blue-900/50 dark:text-blue-300 dark:border-blue-700",
            "video" => "bg-red-50 text-red-700 border-red-200 dark:bg-red-900/50 dark:text-red-300 dark:border-red-700",
            "pyq" => "bg-green-50 text-green-700 border-green-200 dark:bg-green-900/50 dark:text-green-300 dark:border-green-700",
            _ => "bg-gray-50 text-gray-700 border-gray-200 dark:bg-gray-700 dark:text-gray-300 dark:border-gray-600"
        };
    }

    private string FormatDate(DateTime date)
    {
        var now = DateTime.Now;
        var diffTime = Math.Abs((now - date).TotalDays);
        var diffDays = (int)Math.Ceiling(diffTime);
        
        if (diffDays == 1) return "1 day ago";
        if (diffDays < 7) return $"{diffDays} days ago";
        if (diffDays < 30) return $"{Math.Ceiling(diffDays / 7.0)} weeks ago";
        return date.ToShortDateString();
    }

    private List<object> GetPageNumbers()
    {
        var pages = new List<object>();
        var maxVisiblePages = 5;
        
        if (totalPages <= maxVisiblePages)
        {
            for (int i = 1; i <= totalPages; i++)
            {
                pages.Add(i);
            }
        }
        else
        {
            var startPage = Math.Max(1, currentPage - 2);
            var endPage = Math.Min(totalPages, startPage + maxVisiblePages - 1);
            
            if (startPage > 1)
            {
                pages.Add(1);
                if (startPage > 2) pages.Add("...");
            }
            
            for (int i = startPage; i <= endPage; i++)
            {
                pages.Add(i);
            }
            
            if (endPage < totalPages)
            {
                if (endPage < totalPages - 1) pages.Add("...");
                pages.Add(totalPages);
            }
        }
        
        return pages;
    }

    // Computed properties
    private int totalPages => (int)Math.Ceiling((double)filteredResults.Count / itemsPerPage);
    private int startIndex => (currentPage - 1) * itemsPerPage;
    private int endIndex => startIndex + itemsPerPage;
    private List<SearchResult> currentResults => filteredResults.Skip(startIndex).Take(itemsPerPage).ToList();

    public class SearchResult
    {
        public string Id { get; set; } = "";
        public string Title { get; set; } = "";
        public string Type { get; set; } = "";
        public string Subject { get; set; } = "";
        public string Course { get; set; } = "";
        public string Category { get; set; } = "";
        public string Author { get; set; } = "";
        public string Description { get; set; } = "";
        public string Thumbnail { get; set; } = "";
        public double Rating { get; set; }
        public int Views { get; set; }
        public int? Downloads { get; set; }
        public string? Duration { get; set; }
        public DateTime UploadDate { get; set; }
        public List<string> Tags { get; set; } = new();
    }
}