@page "/admin/dashboard/users"
@using EduSetu.Components.Layout
@using EduSetu.Domain.Enums
@using EduSetu.Domain.Entities
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "SuperAdmin")]
@layout AdminLayout

<PageTitle>User Management - Admin Dashboard</PageTitle>

<div class="space-y-6">
    <div class="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-6">
        <div class="flex flex-col sm:flex-row sm:items-center justify-between gap-4">
            <div>
                <h2 class="text-2xl font-bold text-gray-900 dark:text-white">User Management</h2>
                <p class="text-gray-600 dark:text-gray-400 mt-1">Manage all users, roles, and permissions</p>
            </div>
            <div class="flex items-center gap-3">
                <button @onclick="ExportUsers"
                        class="flex items-center gap-2 px-4 py-2 border border-gray-300 rounded-lg transition-colors
               hover:bg-gray-50
               dark:border-gray-700 dark:bg-gray-800 dark:text-gray-200 dark:hover:bg-gray-700">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                    </svg>
                    Export
                </button>
                <button @onclick="ShowAddUserModal" class="flex items-center gap-2 bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg font-medium transition-colors">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4"></path>
                    </svg>
                    Add User
                </button>
            </div>
        </div>
    </div>

    <div class="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-6">
        <div class="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
            <div class="relative md:col-span-2">
                <svg class="absolute left-3 top-3 text-gray-400 dark:text-gray-500 w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                </svg>
                <input type="text" placeholder="Search users by name, email, or institution..."
                       @bind="searchQuery" @bind:after="OnSearchChanged"
                       class="w-full pl-10 pr-4 py-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-red-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400" />
            </div>

            <div>
                <select @bind="selectedRole" @bind:after="OnFilterChanged"
                        class="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-red-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white">
                    <option value="">All Roles</option>
                    <option value="admin">Administrators</option>
                    <option value="teacher">Teachers</option>
                    <option value="user">Students</option>
                </select>
            </div>

            <div>
                <select @bind="selectedStatus" @bind:after="OnFilterChanged"
                        class="w-full p-3 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-red-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white">
                    <option value="">All Status</option>
                    <option value="active">Active</option>
                    <option value="inactive">Inactive</option>
                    <option value="pending">Pending</option>
                    <option value="suspended">Suspended</option>
                </select>
            </div>
        </div>

        <div class="flex flex-col sm:flex-row sm:items-center justify-between gap-4">
            <div class="flex items-center gap-4">
                <div class="flex items-center gap-2">
                    <input type="checkbox" @bind="selectAll" @bind:after="OnSelectAllChanged"
                           class="w-4 h-4 text-red-600 focus:ring-red-500 border-gray-300 dark:border-gray-600 rounded" />
                    <span class="text-sm text-gray-700 dark:text-gray-300">
                        @if (selectedUsers.Any())
                        {
                            @($"{selectedUsers.Count} selected")
                        }
                        else
                        {
                            @("Select all")
                        }
                    </span>
                </div>

                @if (selectedUsers.Any())
                {
                    <div class="flex gap-2">
                        <button @onclick="BulkActivate"
                                class="flex items-center gap-2 text-green-600 hover:text-green-700 px-3 py-2 rounded-lg hover:bg-green-50 transition-colors text-sm">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                            </svg>
                            Activate
                        </button>
                        <button @onclick="BulkSuspend"
                                class="flex items-center gap-2 text-yellow-600 hover:text-yellow-700 px-3 py-2 rounded-lg hover:bg-yellow-50 transition-colors text-sm">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728L5.636 5.636m12.728 12.728L18.364 5.636M5.636 18.364l12.728-12.728"></path>
                            </svg>
                            Suspend
                        </button>
                        <button @onclick="BulkDelete"
                                class="flex items-center gap-2 text-red-600 hover:text-red-700 px-3 py-2 rounded-lg hover:bg-red-50 transition-colors text-sm">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                            </svg>
                            Delete
                        </button>
                    </div>
                }
            </div>

            <div class="flex items-center gap-2">
                <button @onclick="RefreshData" class="p-2 text-gray-400 hover:text-gray-600 rounded-lg hover:bg-gray-100">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                    </svg>
                </button>
                <span class="text-sm text-gray-600">
                    Showing @((currentPage - 1) * itemsPerPage + 1)-@Math.Min(currentPage * itemsPerPage, GetFilteredUsers().Count()) of @GetFilteredUsers().Count() users
                </span>
            </div>
        </div>
    </div>

    <div class="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 overflow-hidden">
        <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200 dark:divide-gray-700">
                <thead class="bg-gray-50 dark:bg-gray-700">
                    <tr>
                        <th class="px-6 py-3 text-left">
                            <input type="checkbox" @bind="selectAll" @bind:after="OnSelectAllChanged"
                                   class="w-4 h-4 text-red-600 focus:ring-red-500 border-gray-300 dark:border-gray-600 rounded" />
                        </th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">User</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Role</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Status</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Institution</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Activity</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 dark:text-gray-400 uppercase tracking-wider">Actions</th>
                    </tr>
                </thead>
                <tbody class="bg-white dark:bg-gray-800 divide-y divide-gray-200 dark:divide-gray-700">
                    @foreach (var user in GetCurrentUsers())
                    {
                        <tr class="hover:bg-gray-50 dark:hover:bg-gray-700">
                            <td class="px-6 py-4">
                                <input type="checkbox" checked="@selectedUsers.Contains(user.Id)"
                                       @onchange="@(() => OnUserSelected(user.Id))"
                                       class="w-4 h-4 text-red-600 focus:ring-red-500 border-gray-300 dark:border-gray-600 rounded" />
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap">
                                <div class="flex items-center gap-3">
                                    <div class="relative">
                                        <img src="@user.Avatar" alt="@user.Name" class="w-10 h-10 rounded-full border border-gray-300 dark:border-gray-600" />
                                        @if (user.Verified)
                                        {
                                            <div class="absolute -bottom-1 -right-1 bg-green-500 rounded-full p-1">
                                                <svg class="w-2.5 h-2.5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                                                </svg>
                                            </div>
                                        }
                                    </div>
                                    <div>
                                        <div class="text-sm font-medium text-gray-900 dark:text-white">@user.Name</div>
                                        <div class="text-sm text-gray-500 dark:text-gray-400">@user.Email</div>
                                        @if (!string.IsNullOrEmpty(user.Phone))
                                        {
                                            <div class="text-xs text-gray-400 dark:text-gray-500">@user.Phone</div>
                                        }
                                    </div>
                                </div>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap">
                                <span class="inline-flex items-center gap-1 px-2 py-1 text-xs font-medium rounded-full @GetRoleColor(user.Role) dark:text-gray-800">
                                    @GetRoleIcon(user.Role)
                                    @user.Role
                                </span>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap">
                                <span class="inline-flex px-2 py-1 text-xs font-medium rounded-full @GetStatusColor(user.Status) dark:text-gray-800">
                                    @user.Status
                                </span>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap">
                                <div class="text-sm text-gray-900 dark:text-white">@user.Institution</div>
                                @if (!string.IsNullOrEmpty(user.Department))
                                {
                                    <div class="text-xs text-gray-500 dark:text-gray-400">@user.Department</div>
                                }
                                <div class="text-xs text-gray-400 dark:text-gray-500">@user.Location</div>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap">
                                <div class="text-sm text-gray-900 dark:text-white">
                                    @user.Uploads uploads • @user.Downloads downloads
                                </div>
                                <div class="text-xs text-gray-500 dark:text-gray-400">Last login: @user.LastLogin</div>
                                @if (user.Rating > 0)
                                {
                                    <div class="text-xs text-gray-500 dark:text-gray-400">Rating: @user.Rating.ToString("F1")/5</div>
                                }
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium">
                                <div class="flex items-center gap-2">
                                    <button @onclick="@(() => EditUser(user.Id))" class="text-blue-600 hover:text-blue-900 dark:text-blue-400 dark:hover:text-blue-600 p-1 rounded" title="Edit user">
                                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                                        </svg>
                                    </button>
                                    @if (user.Status == "active")
                                    {
                                        <button @onclick="@(() => SuspendUser(user.Id))" class="text-yellow-600 hover:text-yellow-900 dark:text-yellow-400 dark:hover:text-yellow-600 p-1 rounded" title="Suspend user">
                                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M18.364 18.364A9 9 0 005.636 5.636m12.728 12.728L5.636 5.636m12.728 12.728L18.364 5.636M5.636 18.364l12.728-12.728"></path>
                                            </svg>
                                        </button>
                                    }
                                    else
                                    {
                                        <button @onclick="@(() => ActivateUser(user.Id))" class="text-green-600 hover:text-green-900 dark:text-green-400 dark:hover:text-green-600 p-1 rounded" title="Activate user">
                                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                            </svg>
                                        </button>
                                    }
                                    @if (!user.Verified)
                                    {
                                        <button @onclick="@(() => VerifyUser(user.Id))" class="text-purple-600 hover:text-purple-900 dark:text-purple-400 dark:hover:text-purple-600 p-1 rounded" title="Verify user">
                                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                            </svg>
                                        </button>
                                    }
                                    <button @onclick="@(() => DeleteUser(user.Id))" class="text-red-600 hover:text-red-900 dark:text-red-400 dark:hover:text-red-600 p-1 rounded" title="Delete user">
                                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                                        </svg>
                                    </button>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    @if (GetTotalPages() > 1)
    {
        <div class="flex items-center justify-center gap-2">
            <button @onclick="@(() => currentPage = Math.Max(1, currentPage - 1))"
                    disabled="@(currentPage == 1)"
                    class="flex items-center gap-2 px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors text-gray-900 dark:text-white">
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7"></path>
                </svg>
                Previous
            </button>

            <div class="flex items-center gap-1">
                @foreach (var pageNum in GetPageNumbers())
                {
                    @if (pageNum == "...")
                    {
                        <span class="px-3 py-2 text-gray-500 dark:text-gray-400">...</span>
                    }
                    else
                    {
                        <button @onclick="@(() => currentPage = (int)pageNum)"
                                class="px-3 py-2 rounded-lg transition-colors @(currentPage == (int)pageNum ? "bg-red-600 text-white" : "hover:bg-gray-100 dark:hover:bg-gray-700 text-gray-700 dark:text-gray-300")">
                            @pageNum
                        </button>
                    }
                }
            </div>

            <button @onclick="@(() => currentPage = Math.Min(GetTotalPages(), currentPage + 1))"
                    disabled="@(currentPage == GetTotalPages())"
                    class="flex items-center gap-2 px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors text-gray-900 dark:text-white">
                Next
                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"></path>
                </svg>
            </button>
        </div>
    }
</div>

@if (showAddUserModal)
{
    <div class="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4" @onclick="CloseAddUserModal">
        <div class="bg-white dark:bg-gray-800 rounded-xl shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto" @onclick:stopPropagation="true">
            <div class="p-6 border-b border-gray-200 dark:border-gray-700">
                <div class="flex items-center justify-between">
                    <h3 class="text-xl font-semibold text-gray-900 dark:text-white">
                        @(editingUser != null ? "Edit User" : "Add New User")
                    </h3>
                    <button @onclick="CloseAddUserModal" class="text-gray-400 dark:text-gray-500 hover:text-gray-600 dark:hover:text-gray-400">
                        <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                    </button>
                </div>
            </div>

            <div class="p-6">
                <div class="space-y-6">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Full Name</label>
                            <input type="text" @bind="newUser.Name" required
                                   class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-red-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                                   placeholder="Enter full name" />
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Email</label>
                            <input type="email" @bind="newUser.Email" required
                                   class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-red-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                                   placeholder="Enter email address" />
                        </div>
                    </div>

                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Role</label>
                            <select @bind="newUser.Role" required
                                    class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-red-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white">
                                <option value="">Select Role</option>
                                <option value="admin">Administrator</option>
                                <option value="teacher">Teacher</option>
                                <option value="user">Student</option>
                            </select>
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Status</label>
                            <select @bind="newUser.Status" required
                                    class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-red-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white">
                                <option value="pending">Pending</option>
                                <option value="active">Active</option>
                                <option value="inactive">Inactive</option>
                                <option value="suspended">Suspended</option>
                            </select>
                        </div>
                    </div>

                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Institution</label>
                            <input type="text" @bind="newUser.Institution" required
                                   class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-red-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                                   placeholder="Enter institution name" />
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Department (Optional)</label>
                            <input type="text" @bind="newUser.Department"
                                   class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-red-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                                   placeholder="Enter department" />
                        </div>
                    </div>

                    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Phone (Optional)</label>
                            <input type="tel" @bind="newUser.Phone"
                                   class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-red-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                                   placeholder="Enter phone number" />
                        </div>

                        <div>
                            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Location</label>
                            <input type="text" @bind="newUser.Location" required
                                   class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-red-500 focus:border-red-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white"
                                   placeholder="Enter location" />
                        </div>
                    </div>

                    <div class="space-y-4">
                        <div class="flex items-center gap-2">
                            <input type="checkbox" @bind="newUser.Verified" id="verified" class="w-4 h-4 text-red-600 focus:ring-red-500 border-gray-300 rounded" />
                            <label for="verified" class="text-sm text-gray-700 dark:text-gray-300">Verified Account</label>
                        </div>

                        <div class="flex items-center gap-2">
                            <input type="checkbox" @bind="newUser.SendWelcomeEmail" id="welcomeEmail" class="w-4 h-4 text-red-600 focus:ring-red-500 border-gray-300 rounded" />
                            <label for="welcomeEmail" class="text-sm text-gray-700 dark:text-gray-300">Send welcome email</label>
                        </div>
                    </div>
                </div>

                <div class="flex items-center justify-end gap-3 mt-6 pt-6 border-t border-gray-200 dark:border-gray-700">
                    <button type="button" @onclick="CloseAddUserModal"
                            class="px-4 py-2 text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-700 hover:bg-gray-200 dark:hover:bg-gray-600 rounded-lg font-medium transition-colors">
                        Cancel
                    </button>
                    <button @onclick="AddNewUser"
                            class="px-4 py-2 bg-red-600 hover:bg-red-700 dark:bg-red-700 dark:hover:bg-red-800 text-white rounded-lg font-medium transition-colors">
                        @(editingUser != null ? "Update User" : "Add User")
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private string searchQuery = "";
    private string selectedRole = "";
    private string selectedStatus = "";
    private int currentPage = 1;
    private const int itemsPerPage = 10;
    private List<string> selectedUsers = new();
    private bool selectAll = false;
    private bool showAddUserModal = false;
    private NewUserForm newUser = new();
    private UserItem? editingUser = null;

    private List<UserItem> users = new()
    {
        new UserItem
        {
            Id = "1",
            Name = "Dr. Sarah Johnson",
            Email = "sarah.johnson@university.edu",
            Role = "teacher",
            Status = "active",
            LastLogin = "2 hours ago",
            Avatar = "https://images.pexels.com/photos/3769021/pexels-photo-3769021.jpeg?auto=compress&cs=tinysrgb&w=150&h=150&dpr=2",
            Institution = "Delhi University",
            Department = "Computer Science",
            Verified = true,
            Phone = "+91 98765 43210",
            Location = "New Delhi, India",
            Uploads = 24,
            Downloads = 15420,
            Rating = 4.8
        },
        new UserItem
        {
            Id = "2",
            Name = "John Smith",
            Email = "john.smith@student.edu",
            Role = "user",
            Status = "active",
            LastLogin = "1 day ago",
            Avatar = "https://images.pexels.com/photos/3769021/pexels-photo-3769021.jpeg?auto=compress&cs=tinysrgb&w=150&h=150&dpr=2",
            Institution = "Mumbai University",
            Verified = true,
            Location = "Mumbai, India",
            Uploads = 0,
            Downloads = 234,
            Rating = 0
        },
        new UserItem
        {
            Id = "3",
            Name = "Admin User",
            Email = "admin@edusetu.com",
            Role = "admin",
            Status = "active",
            LastLogin = "30 minutes ago",
            Avatar = "https://images.pexels.com/photos/3769021/pexels-photo-3769021.jpeg?auto=compress&cs=tinysrgb&w=150&h=150&dpr=2",
            Institution = "EduSetu Platform",
            Verified = true,
            Phone = "+91 87654 32109",
            Location = "Bangalore, India",
            Uploads = 156,
            Downloads = 0,
            Rating = 4.9
        }
    };

    protected override void OnInitialized()
    {
        // Add more sample users
        for (int i = 4; i <= 30; i++)
        {
            var roles = new[] { "user", "teacher", "admin" };
            var statuses = new[] { "active", "inactive", "pending", "suspended" };
            var institutions = new[] { "Delhi University", "Mumbai University", "Bangalore University" };
            var departments = new[] { "Computer Science", "Mathematics", "Physics" };
            var locations = new[] { "Delhi, India", "Mumbai, India", "Bangalore, India" };

            users.Add(new UserItem
            {
                Id = i.ToString(),
                Name = $"User {i}",
                Email = $"user{i}@example.com",
                Role = roles[i % roles.Length],
                Status = statuses[i % statuses.Length],
                LastLogin = $"{Random.Shared.Next(1, 30)} days ago",
                Avatar = "https://images.pexels.com/photos/3769021/pexels-photo-3769021.jpeg?auto=compress&cs=tinysrgb&w=150&h=150&dpr=2",
                Institution = institutions[i % institutions.Length],
                Department = i % 3 == 1 ? departments[i % departments.Length] : null,
                Verified = Random.Shared.Next(2) == 1,
                Phone = Random.Shared.Next(2) == 1 ? $"+91 {Random.Shared.Next(90000, 99999)} {Random.Shared.Next(10000, 99999)}" : null,
                Location = locations[i % locations.Length],
                Uploads = Random.Shared.Next(0, 50),
                Downloads = Random.Shared.Next(0, 5000),
                Rating = Random.Shared.Next(2) == 1 ? 4.0 + Random.Shared.NextDouble() : 0
            });
        }
    }

    private RenderFragment GetRoleIcon(string role)
    {
        return role switch
        {
            "admin" => @<svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"></path>
</svg>,
            "teacher" => @<svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 14l9-5-9-5-9 5 9 5z"></path>
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 14l6.16-3.422a12.083 12.083 0 01.665 6.479A11.952 11.952 0 0012 20.055a11.952 11.952 0 00-6.824-2.998 12.078 12.078 0 01.665-6.479L12 14z"></path>
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 14l9-5-9-5-9 5 9 5zm0 0l6.16-3.422a12.083 12.083 0 01.665 6.479A11.952 11.952 0 0012 20.055a11.952 11.952 0 00-6.824-2.998 12.078 12.078 0 01.665-6.479L12 14z"></path>
</svg>,
            _ => @<svg class="w-3 h-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
</svg>
        };
    }

    private string GetRoleColor(string role)
    {
        return role switch
        {
            "admin" => "bg-red-100 text-red-800",
            "teacher" => "bg-blue-100 text-blue-800",
            "user" => "bg-green-100 text-green-800",
            _ => "bg-gray-100 text-gray-800"
        };
    }

    private string GetStatusColor(string status)
    {
        return status switch
        {
            "active" => "bg-green-100 text-green-800",
            "inactive" => "bg-gray-100 text-gray-800",
            "pending" => "bg-yellow-100 text-yellow-800",
            "suspended" => "bg-red-100 text-red-800",
            _ => "bg-gray-100 text-gray-800"
        };
    }

    private List<UserItem> GetFilteredUsers()
    {
        return users.Where(user =>
        {
            var matchesSearch = user.Name.ToLower().Contains(searchQuery.ToLower()) ||
                               user.Email.ToLower().Contains(searchQuery.ToLower()) ||
                               user.Institution.ToLower().Contains(searchQuery.ToLower());

            var matchesRole = string.IsNullOrEmpty(selectedRole) || user.Role == selectedRole;
            var matchesStatus = string.IsNullOrEmpty(selectedStatus) || user.Status == selectedStatus;

            return matchesSearch && matchesRole && matchesStatus;
        }).ToList();
    }

    private List<UserItem> GetCurrentUsers()
    {
        var filteredUsers = GetFilteredUsers();
        var startIndex = (currentPage - 1) * itemsPerPage;
        return filteredUsers.Skip(startIndex).Take(itemsPerPage).ToList();
    }

    private int GetTotalPages()
    {
        var filteredUsers = GetFilteredUsers();
        return (int)Math.Ceiling((double)filteredUsers.Count / itemsPerPage);
    }

    private List<object> GetPageNumbers()
    {
        var pages = new List<object>();
        var totalPages = GetTotalPages();
        var maxVisiblePages = 5;

        if (totalPages <= maxVisiblePages)
        {
            for (int i = 1; i <= totalPages; i++)
            {
                pages.Add(i);
            }
        }
        else
        {
            var startPage = Math.Max(1, currentPage - 2);
            var endPage = Math.Min(totalPages, startPage + maxVisiblePages - 1);

            if (startPage > 1)
            {
                pages.Add(1);
                if (startPage > 2) pages.Add("...");
            }

            for (int i = startPage; i <= endPage; i++)
            {
                pages.Add(i);
            }

            if (endPage < totalPages)
            {
                if (endPage < totalPages - 1) pages.Add("...");
                pages.Add(totalPages);
            }
        }

        return pages;
    }

    private void OnSearchChanged()
    {
        currentPage = 1;
        StateHasChanged();
    }

    private void OnFilterChanged()
    {
        currentPage = 1;
        StateHasChanged();
    }

    private void OnUserSelected(string userId)
    {
        if (selectedUsers.Contains(userId))
        {
            selectedUsers.Remove(userId);
        }
        else
        {
            selectedUsers.Add(userId);
        }
        StateHasChanged();
    }

    private void OnSelectAllChanged()
    {
        var currentUsers = GetCurrentUsers();
        if (selectAll)
        {
            selectedUsers = currentUsers.Select(u => u.Id).ToList();
        }
        else
        {
            selectedUsers.Clear();
        }
        StateHasChanged();
    }

    private void ShowAddUserModal()
    {
        newUser = new NewUserForm();
        editingUser = null;
        showAddUserModal = true;
        StateHasChanged();
    }

    private void CloseAddUserModal()
    {
        showAddUserModal = false;
        editingUser = null;
        StateHasChanged();
    }

    private void AddNewUser()
    {
        // Create new user
        var newUserId = (users.Count + 1).ToString();
        var newUserItem = new UserItem
        {
            Id = newUserId,
            Name = newUser.Name,
            Email = newUser.Email,
            Role = newUser.Role,
            Status = newUser.Status,
            LastLogin = "Never",
            Avatar = "https://images.pexels.com/photos/3769021/pexels-photo-3769021.jpeg?auto=compress&cs=tinysrgb&w=150&h=150&dpr=2",
            Institution = newUser.Institution,
            Department = newUser.Department,
            Verified = newUser.Verified,
            Phone = newUser.Phone,
            Location = newUser.Location,
            Uploads = 0,
            Downloads = 0,
            Rating = 0
        };

        users.Add(newUserItem);
        CloseAddUserModal();
        StateHasChanged();
    }

    private void EditUser(string userId)
    {
        editingUser = users.FirstOrDefault(u => u.Id == userId);
        if (editingUser != null)
        {
            newUser = new NewUserForm
            {
                Name = editingUser.Name,
                Email = editingUser.Email,
                Role = editingUser.Role,
                Status = editingUser.Status,
                Institution = editingUser.Institution,
                Department = editingUser.Department,
                Phone = editingUser.Phone,
                Location = editingUser.Location,
                Verified = editingUser.Verified
            };
            showAddUserModal = true;
            StateHasChanged();
        }
    }

    private void DeleteUser(string userId)
    {
        // TODO: Implement delete user functionality
        StateHasChanged();
    }

    private void ActivateUser(string userId)
    {
        // TODO: Implement activate user functionality
        StateHasChanged();
    }

    private void SuspendUser(string userId)
    {
        // TODO: Implement suspend user functionality
        StateHasChanged();
    }

    private void VerifyUser(string userId)
    {
        // TODO: Implement verify user functionality
        StateHasChanged();
    }

    private void BulkActivate()
    {
        // TODO: Implement bulk activate functionality
        selectedUsers.Clear();
        StateHasChanged();
    }

    private void BulkSuspend()
    {
        // TODO: Implement bulk suspend functionality
        selectedUsers.Clear();
        StateHasChanged();
    }

    private void BulkDelete()
    {
        // TODO: Implement bulk delete functionality
        selectedUsers.Clear();
        StateHasChanged();
    }

    private void ExportUsers()
    {
        // TODO: Implement export functionality
        StateHasChanged();
    }

    private void RefreshData()
    {
        // TODO: Implement refresh functionality
        StateHasChanged();
    }

    public class UserItem
    {
        public string Id { get; set; } = "";
        public string Name { get; set; } = "";
        public string Email { get; set; } = "";
        public string Role { get; set; } = "";
        public string Status { get; set; } = "";
        public string LastLogin { get; set; } = "";
        public string Avatar { get; set; } = "";
        public string Institution { get; set; } = "";
        public string? Department { get; set; }
        public bool Verified { get; set; }
        public string? Phone { get; set; }
        public string Location { get; set; } = "";
        public int Uploads { get; set; }
        public int Downloads { get; set; }
        public double Rating { get; set; }
    }

    public class NewUserForm
    {
        public string Name { get; set; } = "";
        public string Email { get; set; } = "";
        public string Role { get; set; } = "";
        public string Status { get; set; } = "pending";
        public string Institution { get; set; } = "";
        public string? Department { get; set; }
        public string? Phone { get; set; }
        public string Location { get; set; } = "";
        public bool Verified { get; set; }
        public bool SendWelcomeEmail { get; set; } = true;
    }
}