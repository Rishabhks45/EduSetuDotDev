@page "/teacher/dashboard/settings"
@using System.Text.Json
@using EduSetu.Components.Layout
@layout TeacherLayout
@inject IJSRuntime JSRuntime
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Teacher")]

<PageTitle>Settings - Teacher Dashboard</PageTitle>

<div class="space-y-6">
    <div class="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-6">
        <div class="flex flex-col sm:flex-row sm:items-center justify-between gap-4">
            <div>
                <h2 class="text-2xl font-bold text-gray-900 dark:text-white">Settings</h2>
                <p class="text-gray-600 dark:text-gray-400 mt-1">Manage your account preferences and profile information</p>
            </div>
            <div class="flex items-center gap-3">
                @if (unsavedChanges)
                {
                    <div class="flex items-center gap-2 text-amber-600 dark:text-amber-400 bg-amber-50 dark:bg-amber-900/20 px-3 py-2 rounded-lg">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                        </svg>
                        <span class="text-sm font-medium">Unsaved changes</span>
                    </div>
                }
                <button @onclick="ToggleEditMode" class="flex items-center gap-2 px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors text-gray-900 dark:text-white">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                    </svg>
                    @(isEditing ? "Cancel" : "Edit")
                </button>
                @if (isEditing)
                {
                    <button @onclick="HandleSave" class="flex items-center gap-2 bg-blue-600 hover:bg-blue-700 dark:bg-blue-700 dark:hover:bg-blue-800 text-white px-6 py-2 rounded-lg font-medium transition-colors">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-3m-1 4l-3 3m0 0l-3-3m3 3V4"></path>
                        </svg>
                        Save Changes
                    </button>
                }
            </div>
        </div>
    </div>

    <div class="grid grid-cols-1 lg:grid-cols-4 gap-6">
        <div class="lg:col-span-1">
            <div class="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-4">
                <nav class="space-y-2">
                    @foreach (var tab in tabs)
                    {
                        <button @onclick="@(() => activeTab = tab.Id)"
                                class="w-full flex items-center gap-3 px-4 py-3 rounded-lg transition-colors text-left @(activeTab == tab.Id ? "bg-blue-50 dark:bg-blue-900/20 text-blue-700 dark:text-blue-400 border border-blue-200 dark:border-blue-700" : "text-gray-600 dark:text-gray-400 hover:bg-gray-50 dark:hover:bg-gray-700 hover:text-gray-800 dark:hover:text-gray-200")">
                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                @((MarkupString)tab.Icon)
                            </svg>
                            <span class="font-medium">@tab.Label</span>
                        </button>
                    }
                </nav>
            </div>
        </div>

        <div class="lg:col-span-3">
            <div class="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-6">
                @switch (activeTab)
                {
                    case "personal":
                        <div class="space-y-6">
                            <div>
                                <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Personal Information</h3>

                                <div class="flex items-center gap-6 mb-6">
                                    <div class="relative">
                                        <img src="@settings.Personal.Avatar" alt="Profile" class="w-24 h-24 rounded-full border-4 border-white dark:border-gray-700 shadow-lg object-cover" />
                                        @if (isEditing)
                                        {
                                            <button class="absolute bottom-0 right-0 p-2 bg-blue-600 text-white rounded-full hover:bg-blue-700 transition-colors shadow-lg">
                                                <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24"><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 9a2 2 0 002-2h.93a2 2 0 001.664-.89l.812-1.22A2 2 0 0110.07 4h3.86a2 2 0 011.664.89l.812 1.22A2 2 0 0018.07 7H19a2 2 0 012 2v9a2 2 0 01-2 2H5a2 2 0 01-2-2V9z"></path><path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 13a3 3 0 11-6 0 3 3 0 016 0z"></path></svg>
                                            </button>
                                        }
                                    </div>
                                    <div>
                                        <h4 class="font-semibold text-gray-900 dark:text-white">@originalSettings.Personal.Name</h4>
                                        <p class="text-gray-600 dark:text-gray-400">@originalSettings.Professional.Designation</p>
                                        <p class="text-sm text-gray-500 dark:text-gray-500">@originalSettings.Professional.Institution</p>
                                    </div>
                                </div>

                                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Full Name</label>
                                        <input type="text" @bind="settings.Personal.Name" @bind:after="() => unsavedChanges = true" disabled="@(!isEditing)"
                                               class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500 disabled:bg-gray-100 disabled:text-gray-500 dark:disabled:bg-gray-700 dark:disabled:text-gray-400" />
                                    </div>

                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Email Address</label>
                                        <input type="email" @bind="settings.Personal.Email" @bind:after="() => unsavedChanges = true" disabled="@(!isEditing)"
                                               class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500 disabled:bg-gray-100 disabled:text-gray-500 dark:disabled:bg-gray-700 dark:disabled:text-gray-400" />
                                    </div>

                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Phone Number</label>
                                        <input type="tel" @bind="settings.Personal.Phone" @bind:after="() => unsavedChanges = true" disabled="@(!isEditing)"
                                               class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500 disabled:bg-gray-100 disabled:text-gray-500 dark:disabled:bg-gray-700 dark:disabled:text-gray-400" />
                                    </div>

                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Location</label>
                                        <input type="text" @bind="settings.Personal.Location" @bind:after="() => unsavedChanges = true" disabled="@(!isEditing)"
                                               class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500 disabled:bg-gray-100 disabled:text-gray-500 dark:disabled:bg-gray-700 dark:disabled:text-gray-400" />
                                    </div>

                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Timezone</label>
                                        <select @bind="settings.Personal.Timezone" @bind:after="() => unsavedChanges = true" disabled="@(!isEditing)"
                                                class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500 disabled:bg-gray-100 disabled:text-gray-500 dark:disabled:bg-gray-700 dark:disabled:text-gray-400">
                                            <option value="America/New_York">Eastern Time (ET)</option>
                                            <option value="America/Chicago">Central Time (CT)</option>
                                            <option value="America/Denver">Mountain Time (MT)</option>
                                            <option value="America/Los_Angeles">Pacific Time (PT)</option>
                                            <option value="Asia/Kolkata">India Standard Time (IST)</option>
                                            <option value="Europe/London">Greenwich Mean Time (GMT)</option>
                                        </select>
                                    </div>

                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Language</label>
                                        <select @bind="settings.Personal.Language" @bind:after="() => unsavedChanges = true" disabled="@(!isEditing)"
                                                class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500 disabled:bg-gray-100 disabled:text-gray-500 dark:disabled:bg-gray-700 dark:disabled:text-gray-400">
                                            <option value="English">English</option>
                                            <option value="Spanish">Spanish</option>
                                            <option value="French">French</option>
                                            <option value="German">German</option>
                                            <option value="Hindi">Hindi</option>
                                        </select>
                                    </div>
                                </div>

                                <div>
                                    <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Bio</label>
                                    <textarea @bind="settings.Personal.Bio" @bind:after="() => unsavedChanges = true" disabled="@(!isEditing)" rows="4" placeholder="Tell us about yourself..."
                                              class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500 disabled:bg-gray-100 disabled:text-gray-500 dark:disabled:bg-gray-700 dark:disabled:text-gray-400 resize-none"></textarea>
                                </div>
                            </div>
                        </div>
                        break;
                    case "professional":
                        <div class="space-y-6">
                            <div>
                                <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Professional Information</h3>

                                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Institution</label>
                                        <input type="text" @bind="settings.Professional.Institution" @bind:after="() => unsavedChanges = true" disabled="@(!isEditing)"
                                               class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500 disabled:bg-gray-100 disabled:text-gray-500 dark:disabled:bg-gray-700 dark:disabled:text-gray-400" />
                                    </div>
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Department</label>
                                        <input type="text" @bind="settings.Professional.Department" @bind:after="() => unsavedChanges = true" disabled="@(!isEditing)"
                                               class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500 disabled:bg-gray-100 disabled:text-gray-500 dark:disabled:bg-gray-700 dark:disabled:text-gray-400" />
                                    </div>
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Designation</label>
                                        <input type="text" @bind="settings.Professional.Designation" @bind:after="() => unsavedChanges = true" disabled="@(!isEditing)"
                                               class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500 disabled:bg-gray-100 disabled:text-gray-500 dark:disabled:bg-gray-700 dark:disabled:text-gray-400" />
                                    </div>
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Employee ID</label>
                                        <input type="text" @bind="settings.Professional.EmployeeId" @bind:after="() => unsavedChanges = true" disabled="@(!isEditing)"
                                               class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500 disabled:bg-gray-100 disabled:text-gray-500 dark:disabled:bg-gray-700 dark:disabled:text-gray-400" />
                                    </div>
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Experience</label>
                                        <input type="text" @bind="settings.Professional.Experience" @bind:after="() => unsavedChanges = true" disabled="@(!isEditing)" placeholder="e.g., 10 years"
                                               class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500 disabled:bg-gray-100 disabled:text-gray-500 dark:disabled:bg-gray-700 dark:disabled:text-gray-400" />
                                    </div>
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 my-2">Subjects Teaching</label>
                                    <div class="flex flex-wrap gap-2 mb-3 min-h-[30px]">
                                        @foreach (var subject in settings.Professional.Subjects)
                                        {
                                            <span class="inline-flex items-center gap-2 px-3 py-1 bg-blue-100 dark:bg-blue-900/50 text-blue-800 dark:text-blue-300 text-sm font-medium rounded-full">
                                                @subject
                                                @if (isEditing)
                                                {
                                                    <button @onclick="@(() => RemoveSubject(subject))" class="text-blue-600 dark:text-blue-300 hover:text-blue-900 dark:hover:text-blue-100 font-bold -mr-1">×</button>
                                                }
                                            </span>
                                        }
                                    </div>
                                    @if (isEditing)
                                    {
                                        <div class="flex gap-2">
                                            <input type="text" @bind="newSubject" placeholder="Add subject" @onkeypress="HandleSubjectKeyPress"
                                                   class="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" />
                                            <button @onclick="AddSubject" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">Add</button>
                                        </div>
                                    }
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 my-2">Qualifications</label>
                                    <div class="flex flex-wrap gap-2 mb-3 min-h-[30px]">
                                        @foreach (var qualification in settings.Professional.Qualifications)
                                        {
                                            <span class="inline-flex items-center gap-2 px-3 py-1 bg-green-100 dark:bg-green-900/50 text-green-800 dark:text-green-300 text-sm font-medium rounded-full">
                                                @qualification
                                                @if (isEditing)
                                                {
                                                    <button @onclick="@(() => RemoveQualification(qualification))" class="text-green-600 dark:text-green-300 hover:text-green-900 dark:hover:text-green-100 font-bold -mr-1">×</button>
                                                }
                                            </span>
                                        }
                                    </div>
                                    @if (isEditing)
                                    {
                                        <div class="flex gap-2">
                                            <input type="text" @bind="newQualification" placeholder="Add qualification" @onkeypress="HandleQualificationKeyPress"
                                                   class="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500" />
                                            <button @onclick="AddQualification" class="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors">Add</button>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                        break;
                    case "preferences":
                        <div class="space-y-6">
                            <div>
                                <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Preferences</h3>
                                <div class="mb-6">
                                    <h4 class="font-medium text-gray-900 dark:text-gray-200 mb-3">Notifications</h4>
                                    <div class="space-y-4">
                                        <label class="flex items-center justify-between cursor-pointer">
                                            <div>
                                                <span class="text-sm font-medium text-gray-700 dark:text-gray-300">Email Notifications</span>
                                                <p class="text-xs text-gray-500 dark:text-gray-400">Receive notifications via email.</p>
                                            </div>
                                            <input type="checkbox" @bind="settings.Preferences.Notifications.Email" @bind:after="() => unsavedChanges = true" disabled="@(!isEditing)" class="rounded border-gray-300 dark:border-gray-600 text-blue-600 focus:ring-blue-500 disabled:opacity-50 dark:bg-gray-700" />
                                        </label>
                                        <label class="flex items-center justify-between cursor-pointer">
                                            <div>
                                                <span class="text-sm font-medium text-gray-700 dark:text-gray-300">Push Notifications</span>
                                                <p class="text-xs text-gray-500 dark:text-gray-400">Get updates via browser push notifications.</p>
                                            </div>
                                            <input type="checkbox" @bind="settings.Preferences.Notifications.Push" @bind:after="() => unsavedChanges = true" disabled="@(!isEditing)" class="rounded border-gray-300 dark:border-gray-600 text-blue-600 focus:ring-blue-500 disabled:opacity-50 dark:bg-gray-700" />
                                        </label>
                                        <label class="flex items-center justify-between cursor-pointer">
                                            <div>
                                                <span class="text-sm font-medium text-gray-700 dark:text-gray-300">SMS Notifications</span>
                                                <p class="text-xs text-gray-500 dark:text-gray-400">Receive critical alerts on your phone.</p>
                                            </div>
                                            <input type="checkbox" @bind="settings.Preferences.Notifications.Sms" @bind:after="() => unsavedChanges = true" disabled="@(!isEditing)" class="rounded border-gray-300 dark:border-gray-600 text-blue-600 focus:ring-blue-500 disabled:opacity-50 dark:bg-gray-700" />
                                        </label>
                                        <label class="flex items-center justify-between cursor-pointer">
                                            <div>
                                                <span class="text-sm font-medium text-gray-700 dark:text-gray-300">Reminders</span>
                                                <p class="text-xs text-gray-500 dark:text-gray-400">Class and assignment reminders.</p>
                                            </div>
                                            <input type="checkbox" @bind="settings.Preferences.Notifications.Reminders" @bind:after="() => unsavedChanges = true" disabled="@(!isEditing)" class="rounded border-gray-300 dark:border-gray-600 text-blue-600 focus:ring-blue-500 disabled:opacity-50 dark:bg-gray-700" />
                                        </label>
                                    </div>
                                </div>

                                <div class="mb-6">
                                    <h4 class="font-medium text-gray-900 dark:text-gray-200 mb-3">Privacy</h4>
                                    <div class="space-y-4">
                                        <div>
                                            <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Profile Visibility</label>
                                            <select @bind="settings.Preferences.Privacy.ProfileVisibility" @bind:after="() => unsavedChanges = true" disabled="@(!isEditing)"
                                                    class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 dark:bg-gray-700 dark:border-gray-600 dark:placeholder-gray-400 dark:text-white dark:focus:ring-blue-500 dark:focus:border-blue-500 disabled:bg-gray-100 disabled:text-gray-500 dark:disabled:bg-gray-700 dark:disabled:text-gray-400">
                                                <option value="public">Public</option>
                                                <option value="private">Private</option>
                                                <option value="institution">Institution Only</option>
                                            </select>
                                        </div>
                                        <label class="flex items-center justify-between cursor-pointer">
                                            <span class="text-sm text-gray-700 dark:text-gray-300">Show Email in Profile</span>
                                            <input type="checkbox" @bind="settings.Preferences.Privacy.ShowEmail" @bind:after="() => unsavedChanges = true" disabled="@(!isEditing)" class="rounded border-gray-300 dark:border-gray-600 text-blue-600 focus:ring-blue-500 disabled:opacity-50 dark:bg-gray-700" />
                                        </label>
                                        <label class="flex items-center justify-between cursor-pointer">
                                            <span class="text-sm text-gray-700 dark:text-gray-300">Show Phone in Profile</span>
                                            <input type="checkbox" @bind="settings.Preferences.Privacy.ShowPhone" @bind:after="() => unsavedChanges = true" disabled="@(!isEditing)" class="rounded border-gray-300 dark:border-gray-600 text-blue-600 focus:ring-blue-500 disabled:opacity-50 dark:bg-gray-700" />
                                        </label>
                                        <label class="flex items-center justify-between cursor-pointer">
                                            <span class="text-sm text-gray-700 dark:text-gray-300">Allow Messages from Students</span>
                                            <input type="checkbox" @bind="settings.Preferences.Privacy.AllowMessages" @bind:after="() => unsavedChanges = true" disabled="@(!isEditing)" class="rounded border-gray-300 dark:border-gray-600 text-blue-600 focus:ring-blue-500 disabled:opacity-50 dark:bg-gray-700" />
                                        </label>
                                    </div>
                                </div>
                            </div>
                        </div>
                        break;
                    case "security":
                        <div class="space-y-6">
                            <div>
                                <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Security</h3>
                                <div class="space-y-4">
                                    <div class="flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-900/50 rounded-lg">
                                        <div>
                                            <h4 class="font-medium text-gray-900 dark:text-gray-200">Two-Factor Authentication</h4>
                                            <p class="text-sm text-gray-600 dark:text-gray-400">Add an extra layer of security to your account</p>
                                        </div>
                                        <div class="flex items-center gap-3">
                                            <span class="text-sm font-medium @(settings.Security.TwoFactorEnabled ? "text-green-600 dark:text-green-400" : "text-gray-500 dark:text-gray-400")">
                                                @(settings.Security.TwoFactorEnabled ? "Enabled" : "Disabled")
                                            </span>
                                            <button @onclick="@(() => { settings.Security.TwoFactorEnabled = !settings.Security.TwoFactorEnabled; unsavedChanges = true; })"
                                                    disabled="@(!isEditing)"
                                                    class="px-4 py-2 text-sm font-medium @(settings.Security.TwoFactorEnabled ? "bg-red-600 hover:bg-red-700" : "bg-green-600 hover:bg-green-700") text-white rounded-lg transition-colors disabled:bg-gray-400 dark:disabled:bg-gray-600">
                                                @(settings.Security.TwoFactorEnabled ? "Disable" : "Enable")
                                            </button>
                                        </div>
                                    </div>
                                    <div class="flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-900/50 rounded-lg">
                                        <div>
                                            <h4 class="font-medium text-gray-900 dark:text-gray-200">Change Password</h4>
                                            <p class="text-sm text-gray-600 dark:text-gray-400">Last changed: @settings.Security.LastPasswordChange</p>
                                        </div>
                                        <button @onclick="@(() => showPasswordModal = true)" class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors">
                                            Change Password
                                        </button>
                                    </div>
                                    <div class="flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-900/50 rounded-lg">
                                        <div>
                                            <h4 class="font-medium text-gray-900 dark:text-gray-200">Active Sessions</h4>
                                            <p class="text-sm text-gray-600 dark:text-gray-400">@settings.Security.ActiveSessions active sessions</p>
                                        </div>
                                        <button class="px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg transition-colors">
                                            Sign Out All
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                        break;
                    case "account":
                        <div class="space-y-6">
                            <div>
                                <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Account</h3>
                                <div class="space-y-4">
                                    <div class="flex items-center justify-between p-4 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-900/50 rounded-lg">
                                        <div>
                                            <h4 class="font-medium text-red-900 dark:text-red-300">Delete Account</h4>
                                            <p class="text-sm text-red-700 dark:text-red-400">This action cannot be undone. All your data will be permanently deleted.</p>
                                        </div>
                                        <button @onclick="@(() => showDeleteModal = true)" class="px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg transition-colors">
                                            Delete Account
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                        break;
                }
            </div>
        </div>
    </div>
</div>

@code {
    private string activeTab = "personal";
    private bool unsavedChanges = false;
    private bool isEditing = false;
    private bool showPasswordModal = false;
    private bool showDeleteModal = false;
    private string newSubject = "";
    private string newQualification = "";

    private UserSettings settings = new();
    private UserSettings originalSettings = new();

    private readonly List<SettingsTabItem> tabs = new()
    {
        new() { Id = "personal", Label = "Personal Info", Icon = "<path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z'></path>" },
        new() { Id = "professional", Label = "Professional", Icon = "<path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M21 13.255A23.931 23.931 0 0112 15c-3.183 0-6.22-.62-9-1.745M16 6V4a2 2 0 00-2-2h-4a2 2 0 00-2 2v2m4 6h.01M5 20h14a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z'></path>" },
        new() { Id = "preferences", Label = "Preferences", Icon = "<path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M12 6V4m0 16v-2m8-8h2M4 12H2m15.364 6.364l1.414 1.414M4.222 4.222l1.414 1.414M19.778 4.222l-1.414 1.414M6.636 19.778l-1.414 1.414M12 12a4 4 0 11-8 0 4 4 0 018 0z'></path>" },
        new() { Id = "security", Label = "Security", Icon = "<path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z'></path>" },
        new() { Id = "account", Label = "Account", Icon = "<path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M10 14l2-2m0 0l2-2m-2 2l-2-2m2 2l2 2m7-2a9 9 0 11-18 0 9 9 0 0118 0z'></path>" }
    };

    protected override void OnInitialized()
    {
        LoadInitialSettings();
        settings = DeepClone(originalSettings);
    }

    private void LoadInitialSettings()
    {
        // In a real app, this would come from a database or API
        originalSettings = new UserSettings
        {
            Personal = new PersonalInfo
            {
                Name = "Dr. Sarah Johnson",
                Email = "sarah.johnson@university.edu",
                Phone = "+1 (555) 123-4567",
                Bio = "Computer Science professor with 10+ years of experience in algorithms and data structures. Passionate about teaching and research in machine learning.",
                Avatar = "https://images.pexels.com/photos/3769021/pexels-photo-3769021.jpeg?auto=compress&cs=tinysrgb&w=150&h=150&dpr=2",
                Location = "New York, USA",
                Timezone = "America/New_York",
                Language = "English"
            },
            Professional = new ProfessionalInfo
            {
                Institution = "Delhi University",
                Department = "Computer Science",
                Designation = "Associate Professor",
                EmployeeId = "EMP001234",
                Subjects = new List<string> { "Data Structures", "Algorithms", "Machine Learning", "Database Systems" },
                Experience = "10 years",
                Qualifications = new List<string> { "Ph.D. Computer Science", "M.Tech Computer Science" }
            },
            Preferences = new PreferencesInfo
            {
                Notifications = new NotificationSettings { Email = true, Push = true, Sms = false, Reminders = true },
                Privacy = new PrivacySettings { ProfileVisibility = "public", ShowEmail = false, ShowPhone = false, AllowMessages = true },
            },
            Security = new SecurityInfo { TwoFactorEnabled = true, LastPasswordChange = "2024-01-15", ActiveSessions = 3 }
        };
    }

    private void ToggleEditMode()
    {
        isEditing = !isEditing;
        if (!isEditing) // If 'Cancel' was clicked
        {
            settings = DeepClone(originalSettings); // Revert changes
            unsavedChanges = false;
        }
    }

    private void HandleSave()
    {
        // In a real app, this would make an API call to save `settings`
        originalSettings = DeepClone(settings); // Persist changes to the original state
        isEditing = false;
        unsavedChanges = false;
        // Optional: Show a success toast/notification
    }

    private void AddSubject()
    {
        if (!string.IsNullOrWhiteSpace(newSubject) && !settings.Professional.Subjects.Contains(newSubject))
        {
            settings.Professional.Subjects.Add(newSubject);
            newSubject = "";
            unsavedChanges = true;
        }
    }

    private void HandleSubjectKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter") { AddSubject(); }
    }

    private void RemoveSubject(string subject)
    {
        settings.Professional.Subjects.Remove(subject);
        unsavedChanges = true;
    }

    private void AddQualification()
    {
        if (!string.IsNullOrWhiteSpace(newQualification) && !settings.Professional.Qualifications.Contains(newQualification))
        {
            settings.Professional.Qualifications.Add(newQualification);
            newQualification = "";
            unsavedChanges = true;
        }
    }

    private void HandleQualificationKeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter") { AddQualification(); }
    }

    private void RemoveQualification(string qualification)
    {
        settings.Professional.Qualifications.Remove(qualification);
        unsavedChanges = true;
    }

    private T DeepClone<T>(T obj)
    {
        var json = JsonSerializer.Serialize(obj);
        return JsonSerializer.Deserialize<T>(json) ?? throw new InvalidOperationException("Unable to clone object.");
    }

    // --- Data Models ---
    public class SettingsTabItem
    {
        public string Id { get; set; } = "";
        public string Label { get; set; } = "";
        public string Icon { get; set; } = "";
    }

    public class UserSettings
    {
        public PersonalInfo Personal { get; set; } = new();
        public ProfessionalInfo Professional { get; set; } = new();
        public PreferencesInfo Preferences { get; set; } = new();
        public SecurityInfo Security { get; set; } = new();
    }

    public class PersonalInfo
    {
        public string Name { get; set; } = "";
        public string Email { get; set; } = "";
        public string Phone { get; set; } = "";
        public string Bio { get; set; } = "";
        public string Avatar { get; set; } = "";
        public string Location { get; set; } = "";
        public string Timezone { get; set; } = "";
        public string Language { get; set; } = "";
    }

    public class ProfessionalInfo
    {
        public string Institution { get; set; } = "";
        public string Department { get; set; } = "";
        public string Designation { get; set; } = "";
        public string EmployeeId { get; set; } = "";
        public List<string> Subjects { get; set; } = new();
        public string Experience { get; set; } = "";
        public List<string> Qualifications { get; set; } = new();
    }

    public class PreferencesInfo
    {
        public NotificationSettings Notifications { get; set; } = new();
        public PrivacySettings Privacy { get; set; } = new();
    }

    public class NotificationSettings
    {
        public bool Email { get; set; }
        public bool Push { get; set; }
        public bool Sms { get; set; }
        public bool Reminders { get; set; }
    }

    public class PrivacySettings
    {
        public string ProfileVisibility { get; set; } = "public";
        public bool ShowEmail { get; set; }
        public bool ShowPhone { get; set; }
        public bool AllowMessages { get; set; }
    }

    public class SecurityInfo
    {
        public bool TwoFactorEnabled { get; set; }
        public string LastPasswordChange { get; set; } = "";
        public int ActiveSessions { get; set; }
    }
}