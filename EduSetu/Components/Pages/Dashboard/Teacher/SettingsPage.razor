@page "/teacher/dashboard/settings"
@using EduSetu.Components.Layout
@using EduSetu.Domain.Enums
@using EduSetu.Domain.Entities
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Teacher")]
@layout TeacherLayout

<PageTitle>Settings - Teacher Dashboard</PageTitle>

<div class="space-y-6">
    <!-- Header -->
    <div class="flex justify-between items-center">
        <div>
            <h1 class="text-2xl font-bold text-gray-900">Settings</h1>
            <p class="text-gray-600">Manage your account and preferences</p>
        </div>
        <div class="flex space-x-2">
            @if (unsavedChanges)
            {
                <button @onclick="HandleSave" class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg font-medium transition-colors">
                    <svg class="w-5 h-5 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
                    </svg>
                    Save Changes
                </button>
            }
        </div>
    </div>

    <!-- Settings Navigation -->
    <div class="bg-white rounded-xl shadow-sm border border-gray-200">
        <div class="border-b border-gray-200">
            <nav class="flex space-x-8 px-6">
                @foreach (var tab in tabs)
                {
                    <button @onclick="@(() => activeTab = tab.Id)"
                            class="py-4 px-1 border-b-2 font-medium text-sm @(activeTab == tab.Id ? "border-blue-500 text-blue-600" : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300")">
                        <svg class="w-4 h-4 inline mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            @if (tab.Id == "personal")
                            {
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                            }
                            else if (tab.Id == "professional")
                            {
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
                            }
                            else if (tab.Id == "preferences")
                            {
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
                            }
                            else if (tab.Id == "security")
                            {
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"></path>
                            }
                            else
                            {
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 7a2 2 0 012 2m4 0a6 6 0 01-7.743 5.743L11 17H9v2H7v2H4a1 1 0 01-1-1v-2.586a1 1 0 01.293-.707l5.964-5.964A6 6 0 1121 9z"></path>
                            }
                        </svg>
                        @tab.Label
                    </button>
                }
            </nav>
        </div>

        <div class="p-6">
            @if (activeTab == "personal")
            {
                <!-- Personal Info -->
                <div class="space-y-6">
                    <div class="flex items-center space-x-4">
                        <img src="@settings.Personal.Avatar" alt="@settings.Personal.Name" class="w-20 h-20 rounded-full border border-gray-300" />
                        <div>
                            <h3 class="text-lg font-medium text-gray-900">@settings.Personal.Name</h3>
                            <p class="text-sm text-gray-500">@settings.Personal.Email</p>
                            <button class="mt-2 text-sm text-blue-600 hover:text-blue-700 font-medium">Change Photo</button>
                        </div>
                    </div>

                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Full Name</label>
                            <input type="text" @bind="settings.Personal.Name" @bind:after="() => unsavedChanges = true"
                                   class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" />
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Email</label>
                            <input type="email" @bind="settings.Personal.Email" @bind:after="() => unsavedChanges = true"
                                   class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" />
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Phone</label>
                            <input type="tel" @bind="settings.Personal.Phone" @bind:after="() => unsavedChanges = true"
                                   class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" />
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Location</label>
                            <input type="text" @bind="settings.Personal.Location" @bind:after="() => unsavedChanges = true"
                                   class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" />
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Timezone</label>
                            <select @bind="settings.Personal.Timezone" @bind:after="() => unsavedChanges = true"
                                    class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                                <option value="America/New_York">Eastern Time (ET)</option>
                                <option value="America/Chicago">Central Time (CT)</option>
                                <option value="America/Denver">Mountain Time (MT)</option>
                                <option value="America/Los_Angeles">Pacific Time (PT)</option>
                                <option value="Asia/Kolkata">India Standard Time (IST)</option>
                            </select>
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Language</label>
                            <select @bind="settings.Personal.Language" @bind:after="() => unsavedChanges = true"
                                    class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                                <option value="English">English</option>
                                <option value="Hindi">Hindi</option>
                                <option value="Spanish">Spanish</option>
                            </select>
                        </div>
                    </div>

                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Bio</label>
                        <textarea rows="4" @bind="settings.Personal.Bio" @bind:after="() => unsavedChanges = true"
                                  class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">@settings.Personal.Bio</textarea>
                    </div>
                </div>
            }
            else if (activeTab == "professional")
            {
                <!-- Professional Info -->
                <div class="space-y-6">
                    <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Institution</label>
                            <input type="text" @bind="settings.Professional.Institution" @bind:after="() => unsavedChanges = true"
                                   class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" />
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Department</label>
                            <input type="text" @bind="settings.Professional.Department" @bind:after="() => unsavedChanges = true"
                                   class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" />
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Designation</label>
                        <input type="text" @bind="settings.Professional.Designation" @bind:after="() => unsavedChanges = true"
                                   class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" />
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Employee ID</label>
                            <input type="text" @bind="settings.Professional.EmployeeId" @bind:after="() => unsavedChanges = true"
                                   class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" />
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700 mb-2">Experience</label>
                            <input type="text" @bind="settings.Professional.Experience" @bind:after="() => unsavedChanges = true"
                                   class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" />
                        </div>
                    </div>

                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Subjects Taught</label>
                        <div class="space-y-2">
                            @foreach (var subject in settings.Professional.Subjects)
                            {
                                <div class="flex items-center gap-2">
                                    <span class="px-3 py-1 bg-blue-100 text-blue-800 rounded-full text-sm">@subject</span>
                                    <button @onclick="@(() => RemoveSubject(subject))" class="text-red-600 hover:text-red-700">
                                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                                        </svg>
                                    </button>
                                </div>
                            }
                            <div class="flex gap-2">
                                <input type="text" @bind="newSubject" placeholder="Add subject"
                                       class="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" />
                                <button @onclick="AddSubject" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">Add</button>
                            </div>
                        </div>
                    </div>

                    <div>
                        <label class="block text-sm font-medium text-gray-700 mb-2">Qualifications</label>
                        <div class="space-y-2">
                            @foreach (var qualification in settings.Professional.Qualifications)
                            {
                                <div class="flex items-center gap-2">
                                    <span class="px-3 py-1 bg-green-100 text-green-800 rounded-full text-sm">@qualification</span>
                                    <button @onclick="@(() => RemoveQualification(qualification))" class="text-red-600 hover:text-red-700">
                                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                                        </svg>
                                    </button>
                                </div>
                            }
                            <div class="flex gap-2">
                                <input type="text" @bind="newQualification" placeholder="Add qualification"
                                       class="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" />
                                <button @onclick="AddQualification" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700">Add</button>
                            </div>
                        </div>
                    </div>
                </div>
            }
            else if (activeTab == "preferences")
            {
                <!-- Preferences -->
                <div class="space-y-6">
                    <div>
                        <h3 class="text-lg font-medium text-gray-900 mb-4">Display Preferences</h3>
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">Theme</label>
                                <select @bind="settings.Preferences.Theme" @bind:after="() => unsavedChanges = true"
                                        class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                                    <option value="light">Light</option>
                                    <option value="dark">Dark</option>
                                    <option value="auto">Auto</option>
                                </select>
                            </div>
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">Language</label>
                                <select @bind="settings.Preferences.Interface.Language" @bind:after="() => unsavedChanges = true"
                                        class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                                    <option value="English">English</option>
                                    <option value="Hindi">Hindi</option>
                                    <option value="Spanish">Spanish</option>
                                </select>
                            </div>
                        </div>
                    </div>

                    <div class="border-t border-gray-200 pt-6">
                        <h3 class="text-lg font-medium text-gray-900 mb-4">Notifications</h3>
                        <div class="space-y-4">
                            @foreach (var notification in notificationSettings)
                            {
                                <div class="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
                                    <div>
                                        <h4 class="text-sm font-medium text-gray-900">@notification.Title</h4>
                                        <p class="text-sm text-gray-500">@notification.Description</p>
                                    </div>
                                    <label class="relative inline-flex items-center cursor-pointer">
                                        <input type="checkbox" checked="@notification.Enabled" @onchange="@(() => ToggleNotification(notification.Title))" class="sr-only peer">
                                        <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                                    </label>
                                </div>
                            }
                        </div>
                    </div>

                    <div class="border-t border-gray-200 pt-6">
                        <h3 class="text-lg font-medium text-gray-900 mb-4">Privacy Settings</h3>
                        <div class="space-y-4">
                            <div class="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
                                <div>
                                    <h4 class="text-sm font-medium text-gray-900">Profile Visibility</h4>
                                    <p class="text-sm text-gray-500">Who can see your profile</p>
                                </div>
                                <select @bind="settings.Preferences.Privacy.ProfileVisibility" @bind:after="() => unsavedChanges = true"
                                        class="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500">
                                    <option value="public">Public</option>
                                    <option value="private">Private</option>
                                    <option value="institution">Institution Only</option>
                                </select>
                            </div>
                            <div class="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
                                <div>
                                    <h4 class="text-sm font-medium text-gray-900">Show Email</h4>
                                    <p class="text-sm text-gray-500">Display email to other users</p>
                                </div>
                                <label class="relative inline-flex items-center cursor-pointer">
                                    <input type="checkbox" checked="@settings.Preferences.Privacy.ShowEmail" @onchange="@(() => TogglePrivacySetting("ShowEmail"))" class="sr-only peer">
                                    <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>
                                </label>
                            </div>
                        </div>
                    </div>
                </div>
            }
            else if (activeTab == "security")
            {
                <!-- Security Settings -->
                <div class="space-y-6">
                    <div class="bg-blue-50 border border-blue-200 rounded-lg p-4">
                        <div class="flex">
                            <div class="flex-shrink-0">
                                <svg class="h-5 w-5 text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                                </svg>
                            </div>
                            <div class="ml-3">
                                <h3 class="text-sm font-medium text-blue-800">Security Tips</h3>
                                <div class="mt-2 text-sm text-blue-700">
                                    <p>Use a strong password and enable two-factor authentication for better security.</p>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="space-y-4">
                        <div>
                            <h3 class="text-lg font-medium text-gray-900 mb-4">Change Password</h3>
                            <div class="space-y-4">
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Current Password</label>
                                    <input type="password" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" />
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">New Password</label>
                                    <input type="password" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" />
                                </div>
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Confirm New Password</label>
                                    <input type="password" class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500" />
                                </div>
                                <button class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg font-medium transition-colors">
                                    Update Password
                                </button>
                            </div>
                        </div>

                        <div class="border-t border-gray-200 pt-6">
                            <h3 class="text-lg font-medium text-gray-900 mb-4">Two-Factor Authentication</h3>
                            <div class="flex items-center justify-between">
                                <div>
                                    <p class="text-sm font-medium text-gray-900">Two-factor authentication</p>
                                    <p class="text-sm text-gray-500">Add an extra layer of security to your account</p>
                                </div>
                                <button class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg font-medium transition-colors">
                                    @(settings.Security.TwoFactorEnabled ? "Disable 2FA" : "Enable 2FA")
                                </button>
                            </div>
                        </div>

                        <div class="border-t border-gray-200 pt-6">
                            <h3 class="text-lg font-medium text-gray-900 mb-4">Login Sessions</h3>
                            <div class="space-y-3">
                                @foreach (var session in loginSessions)
                                {
                                    <div class="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                                        <div class="flex items-center space-x-3">
                                            <div class="w-3 h-3 @(session.IsCurrent ? "bg-green-500" : "bg-gray-400") rounded-full"></div>
                                            <div>
                                                <p class="text-sm font-medium text-gray-900">@session.Device</p>
                                                <p class="text-xs text-gray-500">@session.Location • @session.LastActive</p>
                                            </div>
                                        </div>
                                        @if (!session.IsCurrent)
                                        {
                                            <button class="text-sm text-red-600 hover:text-red-700 font-medium">Revoke</button>
                                        }
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                </div>
            }
            else if (activeTab == "account")
            {
                <!-- Account Settings -->
                <div class="space-y-6">
                    <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
                        <div class="flex">
                            <div class="flex-shrink-0">
                                <svg class="h-5 w-5 text-yellow-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                                </svg>
                            </div>
                            <div class="ml-3">
                                <h3 class="text-sm font-medium text-yellow-800">Account Actions</h3>
                                <div class="mt-2 text-sm text-yellow-700">
                                    <p>These actions will affect your account permanently.</p>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="space-y-4">
                        <div class="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
                            <div>
                                <h4 class="text-sm font-medium text-gray-900">Export Data</h4>
                                <p class="text-sm text-gray-500">Download all your data and content</p>
                            </div>
                            <button class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg font-medium transition-colors">
                                Export
                            </button>
                        </div>

                        <div class="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
                            <div>
                                <h4 class="text-sm font-medium text-gray-900">Delete Account</h4>
                                <p class="text-sm text-gray-500">Permanently delete your account and all data</p>
                            </div>
                            <button class="bg-red-600 hover:bg-red-700 text-white px-4 py-2 rounded-lg font-medium transition-colors">
                                Delete Account
                            </button>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private string activeTab = "personal";
    private bool unsavedChanges = false;
    private string newSubject = "";
    private string newQualification = "";

    private List<SettingsTabItem> tabs = new()
    {
        new SettingsTabItem { Id = "personal", Label = "Personal Info" },
        new SettingsTabItem { Id = "professional", Label = "Professional" },
        new SettingsTabItem { Id = "preferences", Label = "Preferences" },
        new SettingsTabItem { Id = "security", Label = "Security" },
        new SettingsTabItem { Id = "account", Label = "Account" }
    };

    private UserSettings settings = new()
    {
        Personal = new PersonalInfo
        {
            Name = "Dr. Sarah Johnson",
            Email = "sarah.johnson@university.edu",
            Phone = "+1 (555) 123-4567",
            Bio = "Computer Science professor with 10+ years of experience in algorithms and data structures. Passionate about teaching and research in machine learning.",
            Avatar = "https://images.pexels.com/photos/3769021/pexels-photo-3769021.jpeg?auto=compress&cs=tinysrgb&w=150&h=150&dpr=2",
            Location = "New York, USA",
            Timezone = "America/New_York",
            Language = "English"
        },
        Professional = new ProfessionalInfo
        {
            Institution = "Delhi University",
            Department = "Computer Science",
            Designation = "Associate Professor",
            EmployeeId = "EMP001234",
            Subjects = new List<string> { "Data Structures", "Algorithms", "Machine Learning", "Database Systems" },
            Experience = "10 years",
            Qualifications = new List<string> { "Ph.D. Computer Science", "M.Tech Computer Science", "B.Tech Computer Science" }
        },
        Preferences = new PreferencesInfo
        {
            Theme = "light",
            Notifications = new NotificationSettings
            {
                Email = true,
                Push = true,
                Sms = false,
                Reminders = true,
                Announcements = true,
                Messages = true
            },
            Privacy = new PrivacySettings
            {
                ProfileVisibility = "public",
                ShowEmail = false,
                ShowPhone = false,
                AllowMessages = true
            },
            Interface = new InterfaceSettings
            {
                Language = "English",
                DateFormat = "MM/DD/YYYY",
                TimeFormat = "12h",
                StartPage = "overview"
            }
        },
        Security = new SecurityInfo
        {
            TwoFactorEnabled = true,
            LastPasswordChange = "2024-01-15",
            ActiveSessions = 3
        }
    };

    private List<NotificationSettingItem> notificationSettings = new()
    {
        new NotificationSettingItem { Title = "Email", Description = "Receive email notifications", Enabled = true },
        new NotificationSettingItem { Title = "Push", Description = "Receive push notifications", Enabled = true },
        new NotificationSettingItem { Title = "SMS", Description = "Receive SMS notifications", Enabled = false },
        new NotificationSettingItem { Title = "Reminders", Description = "Class and assignment reminders", Enabled = true },
        new NotificationSettingItem { Title = "Announcements", Description = "Platform announcements", Enabled = true },
        new NotificationSettingItem { Title = "Messages", Description = "New message notifications", Enabled = true }
    };

    private List<LoginSessionItem> loginSessions = new()
    {
        new LoginSessionItem { Device = "Chrome on Windows", Location = "New York, USA", LastActive = "Current session", IsCurrent = true },
        new LoginSessionItem { Device = "Safari on iPhone", Location = "Mumbai, India", LastActive = "2 hours ago", IsCurrent = false },
        new LoginSessionItem { Device = "Firefox on Mac", Location = "Bangalore, India", LastActive = "1 day ago", IsCurrent = false }
    };

    private void HandleSave()
    {
        // In a real app, this would make an API call
        unsavedChanges = false;
        // Show success message
    }

    private void AddSubject()
    {
        if (!string.IsNullOrWhiteSpace(newSubject) && !settings.Professional.Subjects.Contains(newSubject))
        {
            settings.Professional.Subjects.Add(newSubject);
            newSubject = "";
            unsavedChanges = true;
        }
    }

    private void RemoveSubject(string subject)
    {
        settings.Professional.Subjects.Remove(subject);
        unsavedChanges = true;
    }

    private void AddQualification()
    {
        if (!string.IsNullOrWhiteSpace(newQualification) && !settings.Professional.Qualifications.Contains(newQualification))
        {
            settings.Professional.Qualifications.Add(newQualification);
            newQualification = "";
            unsavedChanges = true;
        }
    }

    private void RemoveQualification(string qualification)
    {
        settings.Professional.Qualifications.Remove(qualification);
        unsavedChanges = true;
    }

    private void ToggleNotification(string title)
    {
        var notification = notificationSettings.FirstOrDefault(n => n.Title == title);
        if (notification != null)
        {
            notification.Enabled = !notification.Enabled;
            unsavedChanges = true;
        }
    }

    private void TogglePrivacySetting(string setting)
    {
        switch (setting)
        {
            case "ShowEmail":
                settings.Preferences.Privacy.ShowEmail = !settings.Preferences.Privacy.ShowEmail;
                break;
            case "ShowPhone":
                settings.Preferences.Privacy.ShowPhone = !settings.Preferences.Privacy.ShowPhone;
                break;
            case "AllowMessages":
                settings.Preferences.Privacy.AllowMessages = !settings.Preferences.Privacy.AllowMessages;
                break;
        }
        unsavedChanges = true;
    }


    public class SettingsTabItem
    {
        public string Id { get; set; } = "";
        public string Label { get; set; } = "";
    }

    public class UserSettings
    {
        public PersonalInfo Personal { get; set; } = new();
        public ProfessionalInfo Professional { get; set; } = new();
        public PreferencesInfo Preferences { get; set; } = new();
        public SecurityInfo Security { get; set; } = new();
    }

    public class PersonalInfo
    {
        public string Name { get; set; } = "";
        public string Email { get; set; } = "";
        public string Phone { get; set; } = "";
        public string Bio { get; set; } = "";
        public string Avatar { get; set; } = "";
        public string Location { get; set; } = "";
        public string Timezone { get; set; } = "";
        public string Language { get; set; } = "";
    }

    public class ProfessionalInfo
    {
        public string Institution { get; set; } = "";
        public string Department { get; set; } = "";
        public string Designation { get; set; } = "";
        public string EmployeeId { get; set; } = "";
        public List<string> Subjects { get; set; } = new();
        public string Experience { get; set; } = "";
        public List<string> Qualifications { get; set; } = new();
    }

    public class PreferencesInfo
    {
        public string Theme { get; set; } = "";
        public NotificationSettings Notifications { get; set; } = new();
        public PrivacySettings Privacy { get; set; } = new();
        public InterfaceSettings Interface { get; set; } = new();
    }

    public class NotificationSettings
    {
        public bool Email { get; set; }
        public bool Push { get; set; }
        public bool Sms { get; set; }
        public bool Reminders { get; set; }
        public bool Announcements { get; set; }
        public bool Messages { get; set; }
    }

    public class PrivacySettings
    {
        public string ProfileVisibility { get; set; } = "";
        public bool ShowEmail { get; set; }
        public bool ShowPhone { get; set; }
        public bool AllowMessages { get; set; }
    }

    public class InterfaceSettings
    {
        public string Language { get; set; } = "";
        public string DateFormat { get; set; } = "";
        public string TimeFormat { get; set; } = "";
        public string StartPage { get; set; } = "";
    }

    public class SecurityInfo
    {
        public bool TwoFactorEnabled { get; set; }
        public string LastPasswordChange { get; set; } = "";
        public int ActiveSessions { get; set; }
    }

    public class NotificationSettingItem
    {
        public string Title { get; set; } = "";
        public string Description { get; set; } = "";
        public bool Enabled { get; set; }
    }

    public class LoginSessionItem
    {
        public string Device { get; set; } = "";
        public string Location { get; set; } = "";
        public string LastActive { get; set; } = "";
        public bool IsCurrent { get; set; }
    }
}