@page "/teacher/dashboard/settings"
@using EduSetu.Components.Layout
@using EduSetu.Domain.Enums
@using EduSetu.Domain.Entities
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Teacher")]
@layout TeacherLayout
@inject IJSRuntime JSRuntime

<PageTitle>Settings - Teacher Dashboard</PageTitle>

<div class="space-y-6">
    <!-- Header -->
    <div class="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-6">
        <div class="flex flex-col sm:flex-row sm:items-center justify-between gap-4">
            <div>
                <h2 class="text-2xl font-bold text-gray-900 dark:text-white">Settings</h2>
                <p class="text-gray-600 dark:text-gray-400 mt-1">Manage your account preferences and profile information</p>
            </div>
            <div class="flex items-center gap-3">
                @if (unsavedChanges)
                {
                    <div class="flex items-center gap-2 text-amber-600 dark:text-amber-400 bg-amber-50 dark:bg-amber-900/20 px-3 py-2 rounded-lg">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
                        </svg>
                        <span class="text-sm font-medium">Unsaved changes</span>
                    </div>
                }
                <button @onclick="@(() => isEditing = !isEditing)" class="flex items-center gap-2 px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors text-gray-900 dark:text-white">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z"></path>
                    </svg>
                    @(isEditing ? "Cancel" : "Edit")
                </button>
                @if (isEditing)
                {
                    <button @onclick="HandleSave" class="flex items-center gap-2 bg-blue-600 hover:bg-blue-700 dark:bg-blue-700 dark:hover:bg-blue-800 text-white px-6 py-2 rounded-lg font-medium transition-colors">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7H5a2 2 0 00-2 2v9a2 2 0 002 2h14a2 2 0 002-2V9a2 2 0 00-2-2h-3m-1 4l-3 3m0 0l-3-3m3 3V4"></path>
                        </svg>
                        Save Changes
                    </button>
                }
            </div>
        </div>
    </div>

    <div class="grid grid-cols-1 lg:grid-cols-4 gap-6">
        <!-- Sidebar Navigation -->
        <div class="lg:col-span-1">
            <div class="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-4">
                <nav class="space-y-2">
                    @foreach (var tab in tabs)
                    {
                        <button @onclick="@(() => activeTab = tab.Id)"
                                class="w-full flex items-center gap-3 px-4 py-3 rounded-lg transition-colors text-left @(activeTab == tab.Id ? "bg-blue-50 dark:bg-blue-900/20 text-blue-700 dark:text-blue-400 border border-blue-200 dark:border-blue-700" : "text-gray-600 dark:text-gray-400 hover:bg-gray-50 dark:hover:bg-gray-700 hover:text-gray-800 dark:hover:text-gray-200")">
                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                @if (tab.Id == "personal")
                                {
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                                }
                                else if (tab.Id == "professional")
                                {
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
                                }
                                else if (tab.Id == "preferences")
                                {
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.75 17L9 20l-1 1h8l-1-1-.75-3M3 13h18M5 17h14a2 2 0 002-2V5a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
                                }
                                else if (tab.Id == "security")
                                {
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m5.618-4.016A11.955 11.955 0 0112 2.944a11.955 11.955 0 01-8.618 3.04A12.02 12.02 0 003 9c0 5.591 3.824 10.29 9 11.622 5.176-1.332 9-6.03 9-11.622 0-1.042-.133-2.052-.382-3.016z"></path>
                                }
                                else
                                {
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 7a2 2 0 012 2m4 0a6 6 0 01-7.743 5.743L11 17H9v2H7v2H4a1 1 0 01-1-1v-2.586a1 1 0 01.293-.707l5.964-5.964A6 6 0 1121 9z"></path>
                                }
                            </svg>
                            <span class="font-medium">@tab.Label</span>
                        </button>
                    }
                </nav>
            </div>
        </div>

        <!-- Main Content -->
        <div class="lg:col-span-3">
            <div class="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-6">
                @if (activeTab == "personal")
                {
                    <!-- Personal Information -->
                    <div class="space-y-6">
                        <div>
                            <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Personal Information</h3>
                            
                            <!-- Avatar -->
                            <div class="flex items-center gap-6 mb-6">
                                <div class="relative">
                                    <img src="@settings.Personal.Avatar" alt="Profile" class="w-24 h-24 rounded-full border-4 border-white shadow-lg object-cover" />
                                    @if (isEditing)
                                    {
                                        <button class="absolute bottom-0 right-0 p-2 bg-blue-600 text-white rounded-full hover:bg-blue-700 transition-colors shadow-lg">
                                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 9a2 2 0 002-2h.93a2 2 0 001.664-.89l.812-1.22A2 2 0 0110.07 4h3.86a2 2 0 011.664.89l.812 1.22A2 2 0 0018.07 7H19a2 2 0 012 2v9a2 2 0 01-2 2H5a2 2 0 01-2-2V9z"></path>
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 13a3 3 0 11-6 0 3 3 0 016 0z"></path>
                                            </svg>
                                        </button>
                                    }
                                </div>
                                <div>
                                    <h4 class="font-semibold text-gray-900">@settings.Personal.Name</h4>
                                    <p class="text-gray-600">@settings.Professional.Designation</p>
                                    <p class="text-sm text-gray-500">@settings.Professional.Institution</p>
                                </div>
                            </div>

                            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Full Name</label>
                                    <input type="text" @bind="settings.Personal.Name" @bind:after="() => unsavedChanges = true"
                                           disabled="@(!isEditing)"
                                           class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 disabled:bg-gray-50 disabled:text-gray-500" />
                                </div>

                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Email Address</label>
                                    <input type="email" @bind="settings.Personal.Email" @bind:after="() => unsavedChanges = true"
                                           disabled="@(!isEditing)"
                                           class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 disabled:bg-gray-50 disabled:text-gray-500" />
                                </div>

                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Phone Number</label>
                                    <input type="tel" @bind="settings.Personal.Phone" @bind:after="() => unsavedChanges = true"
                                           disabled="@(!isEditing)"
                                           class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 disabled:bg-gray-50 disabled:text-gray-500" />
                                </div>

                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Location</label>
                                    <input type="text" @bind="settings.Personal.Location" @bind:after="() => unsavedChanges = true"
                                           disabled="@(!isEditing)"
                                           class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 disabled:bg-gray-50 disabled:text-gray-500" />
                                </div>

                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Timezone</label>
                                    <select @bind="settings.Personal.Timezone" @bind:after="() => unsavedChanges = true"
                                            disabled="@(!isEditing)"
                                            class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 disabled:bg-gray-50 disabled:text-gray-500">
                                        <option value="America/New_York">Eastern Time (ET)</option>
                                        <option value="America/Chicago">Central Time (CT)</option>
                                        <option value="America/Denver">Mountain Time (MT)</option>
                                        <option value="America/Los_Angeles">Pacific Time (PT)</option>
                                        <option value="Asia/Kolkata">India Standard Time (IST)</option>
                                        <option value="Europe/London">Greenwich Mean Time (GMT)</option>
                                    </select>
                                </div>

                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Language</label>
                                    <select @bind="settings.Personal.Language" @bind:after="() => unsavedChanges = true"
                                            disabled="@(!isEditing)"
                                            class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 disabled:bg-gray-50 disabled:text-gray-500">
                                        <option value="English">English</option>
                                        <option value="Spanish">Spanish</option>
                                        <option value="French">French</option>
                                        <option value="German">German</option>
                                        <option value="Hindi">Hindi</option>
                                    </select>
                                </div>
                            </div>

                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">Bio</label>
                                <textarea @bind="settings.Personal.Bio" @bind:after="() => unsavedChanges = true"
                                          disabled="@(!isEditing)"
                                          rows="4"
                                          class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 disabled:bg-gray-50 disabled:text-gray-500 resize-none"
                                          placeholder="Tell us about yourself..."></textarea>
                            </div>
                        </div>
                    </div>
                }
                else if (activeTab == "professional")
                {
                    <!-- Professional Information -->
                    <div class="space-y-6">
                        <div>
                            <h3 class="text-lg font-semibold text-gray-900 mb-4">Professional Information</h3>
                            
                            <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Institution</label>
                                    <input type="text" @bind="settings.Professional.Institution" @bind:after="() => unsavedChanges = true"
                                           disabled="@(!isEditing)"
                                           class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 disabled:bg-gray-50 disabled:text-gray-500" />
                                </div>

                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Department</label>
                                    <input type="text" @bind="settings.Professional.Department" @bind:after="() => unsavedChanges = true"
                                           disabled="@(!isEditing)"
                                           class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 disabled:bg-gray-50 disabled:text-gray-500" />
                                </div>

                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Designation</label>
                                    <input type="text" @bind="settings.Professional.Designation" @bind:after="() => unsavedChanges = true"
                                           disabled="@(!isEditing)"
                                           class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 disabled:bg-gray-50 disabled:text-gray-500" />
                                </div>

                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Employee ID</label>
                                    <input type="text" @bind="settings.Professional.EmployeeId" @bind:after="() => unsavedChanges = true"
                                           disabled="@(!isEditing)"
                                           class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 disabled:bg-gray-50 disabled:text-gray-500" />
                                </div>

                                <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Experience</label>
                                    <input type="text" @bind="settings.Professional.Experience" @bind:after="() => unsavedChanges = true"
                                           disabled="@(!isEditing)"
                                           class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 disabled:bg-gray-50 disabled:text-gray-500"
                                           placeholder="e.g., 10 years" />
                                </div>
                            </div>

                            <!-- Subjects -->
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">Subjects Teaching</label>
                                <div class="flex flex-wrap gap-2 mb-3">
                                    @foreach (var subject in settings.Professional.Subjects)
                                    {
                                        <span class="inline-flex items-center gap-1 px-3 py-1 bg-blue-100 text-blue-800 text-sm rounded-full">
                                            @subject
                                            @if (isEditing)
                                            {
                                                <button @onclick="@(() => RemoveSubject(subject))" class="hover:text-blue-900">×</button>
                                            }
                                        </span>
                                    }
                                </div>
                                @if (isEditing)
                                {
                                    <div class="flex gap-2">
                                        <input type="text" @bind="newSubject" placeholder="Add subject"
                                               class="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                               @onkeypress="@(e => { if (e.Key == "Enter") { AddSubject(); } })" />
                                        <button @onclick="AddSubject" class="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">Add</button>
                                    </div>
                                }
                            </div>

                            <!-- Qualifications -->
                            <div>
                                <label class="block text-sm font-medium text-gray-700 mb-2">Qualifications</label>
                                <div class="flex flex-wrap gap-2 mb-3">
                                    @foreach (var qualification in settings.Professional.Qualifications)
                                    {
                                        <span class="inline-flex items-center gap-1 px-3 py-1 bg-green-100 text-green-800 text-sm rounded-full">
                                            @qualification
                                            @if (isEditing)
                                            {
                                                <button @onclick="@(() => RemoveQualification(qualification))" class="hover:text-green-900">×</button>
                                            }
                                        </span>
                                    }
                                </div>
                                @if (isEditing)
                                {
                                    <div class="flex gap-2">
                                        <input type="text" @bind="newQualification" placeholder="Add qualification"
                                               class="flex-1 px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500"
                                               @onkeypress="@(e => { if (e.Key == "Enter") { AddQualification(); } })" />
                                        <button @onclick="AddQualification" class="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors">Add</button>
                                    </div>
                                }
                            </div>
                        </div>
                    </div>
                }
                else if (activeTab == "preferences")
                {
                    <!-- Preferences -->
                    <div class="space-y-6">
                        <div>
                            <h3 class="text-lg font-semibold text-gray-900 mb-4">Preferences</h3>
                            
                            <!-- Theme -->
                            <div class="mb-6">
                                <label class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">Theme</label>
                                <div class="flex gap-4">
                                    <label class="flex items-center gap-2">
                                        <input type="radio" name="theme" value="light" 
                                               checked="@(settings.Preferences.Theme == "light")" 
                                               @onchange="@(async () => await SetTheme("light"))"
                                               disabled="@(!isEditing)"
                                               class="text-blue-600 focus:ring-blue-500 disabled:opacity-50" />
                                        <span class="text-sm text-gray-700 dark:text-gray-300">Light</span>
                                    </label>
                                    <label class="flex items-center gap-2">
                                        <input type="radio" name="theme" value="dark" 
                                               checked="@(settings.Preferences.Theme == "dark")" 
                                               @onchange="@(async () => await SetTheme("dark"))"
                                               disabled="@(!isEditing)"
                                               class="text-blue-600 focus:ring-blue-500 disabled:opacity-50" />
                                        <span class="text-sm text-gray-700 dark:text-gray-300">Dark</span>
                                    </label>
                                    <label class="flex items-center gap-2">
                                        <input type="radio" name="theme" value="auto" 
                                               checked="@(settings.Preferences.Theme == "auto")" 
                                               @onchange="@(async () => await SetTheme("auto"))"
                                               disabled="@(!isEditing)"
                                               class="text-blue-600 focus:ring-blue-500 disabled:opacity-50" />
                                        <span class="text-sm text-gray-700 dark:text-gray-300">Auto</span>
                                    </label>
                                </div>
                            </div>

                            <!-- Notifications -->
                            <div class="mb-6">
                                <h4 class="font-medium text-gray-900 mb-3">Notifications</h4>
                                <div class="space-y-3">
                                    @foreach (var notification in GetNotificationSettings())
                                    {
                                        <label class="flex items-center justify-between">
                                            <div>
                                                <span class="text-sm font-medium text-gray-700">@notification.Label</span>
                                                <p class="text-xs text-gray-500">@notification.Description</p>
                                            </div>
                                            <input type="checkbox" @bind="notification.Value" @bind:after="() => unsavedChanges = true"
                                                   disabled="@(!isEditing)"
                                                   class="rounded border-gray-300 text-blue-600 focus:ring-blue-500 disabled:opacity-50" />
                                        </label>
                                    }
                                </div>
                            </div>

                            <!-- Privacy -->
                            <div class="mb-6">
                                <h4 class="font-medium text-gray-900 mb-3">Privacy</h4>
                                <div class="space-y-3">
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 mb-2">Profile Visibility</label>
                                        <select @bind="settings.Preferences.Privacy.ProfileVisibility" @bind:after="() => unsavedChanges = true"
                                                disabled="@(!isEditing)"
                                                class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 disabled:bg-gray-50 disabled:text-gray-500">
                                            <option value="public">Public</option>
                                            <option value="private">Private</option>
                                            <option value="institution">Institution Only</option>
                                        </select>
                                    </div>
                                    <div class="space-y-2">
                                        @foreach (var privacy in GetPrivacySettings())
                                        {
                                            <label class="flex items-center justify-between">
                                                <span class="text-sm text-gray-700">@privacy.Label</span>
                                                <input type="checkbox" @bind="privacy.Value" @bind:after="() => unsavedChanges = true"
                                                       disabled="@(!isEditing)"
                                                       class="rounded border-gray-300 text-blue-600 focus:ring-blue-500 disabled:opacity-50" />
                                            </label>
                                        }
                                    </div>
                                </div>
                            </div>

                            <!-- Interface -->
                            <div>
                                <h4 class="font-medium text-gray-900 mb-3">Interface</h4>
                                <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 mb-2">Language</label>
                                        <select @bind="settings.Preferences.Interface.Language" @bind:after="() => unsavedChanges = true"
                                                disabled="@(!isEditing)"
                                                class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 disabled:bg-gray-50 disabled:text-gray-500">
                                            <option value="English">English</option>
                                            <option value="Spanish">Spanish</option>
                                            <option value="French">French</option>
                                            <option value="Hindi">Hindi</option>
                                        </select>
                                    </div>
                                    <div>
                                        <label class="block text-sm font-medium text-gray-700 mb-2">Time Format</label>
                                        <select @bind="settings.Preferences.Interface.TimeFormat" @bind:after="() => unsavedChanges = true"
                                                disabled="@(!isEditing)"
                                                class="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 disabled:bg-gray-50 disabled:text-gray-500">
                                            <option value="12h">12-hour</option>
                                            <option value="24h">24-hour</option>
                                        </select>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                }
                else if (activeTab == "security")
                {
                    <!-- Security -->
                    <div class="space-y-6">
                        <div>
                            <h3 class="text-lg font-semibold text-gray-900 mb-4">Security</h3>
                            
                            <div class="space-y-4">
                                <div class="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
                                    <div>
                                        <h4 class="font-medium text-gray-900">Two-Factor Authentication</h4>
                                        <p class="text-sm text-gray-600">Add an extra layer of security to your account</p>
                                    </div>
                                    <div class="flex items-center gap-3">
                                        <span class="text-sm text-gray-500">@(settings.Security.TwoFactorEnabled ? "Enabled" : "Disabled")</span>
                                        <button @onclick="@(() => settings.Security.TwoFactorEnabled = !settings.Security.TwoFactorEnabled)" 
                                                class="px-4 py-2 @(settings.Security.TwoFactorEnabled ? "bg-green-600 hover:bg-green-700" : "bg-gray-600 hover:bg-gray-700") text-white rounded-lg transition-colors">
                                            @(settings.Security.TwoFactorEnabled ? "Disable" : "Enable")
                                        </button>
                                    </div>
                                </div>

                                <div class="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
                                    <div>
                                        <h4 class="font-medium text-gray-900">Change Password</h4>
                                        <p class="text-sm text-gray-600">Last changed: @settings.Security.LastPasswordChange</p>
                                    </div>
                                    <button @onclick="@(() => showPasswordModal = true)" class="px-4 py-2 bg-blue-600 hover:bg-blue-700 text-white rounded-lg transition-colors">
                                        Change Password
                                    </button>
                                </div>

                                <div class="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
                                    <div>
                                        <h4 class="font-medium text-gray-900">Active Sessions</h4>
                                        <p class="text-sm text-gray-600">@settings.Security.ActiveSessions active sessions</p>
                                    </div>
                                    <button class="px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg transition-colors">
                                        Sign Out All
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
                else if (activeTab == "account")
                {
                    <!-- Account -->
                    <div class="space-y-6">
                        <div>
                            <h3 class="text-lg font-semibold text-gray-900 mb-4">Account</h3>
                            
                            <div class="space-y-4">
                                <div class="flex items-center justify-between p-4 bg-red-50 border border-red-200 rounded-lg">
                                    <div>
                                        <h4 class="font-medium text-red-900">Delete Account</h4>
                                        <p class="text-sm text-red-700">This action cannot be undone. All your data will be permanently deleted.</p>
                                    </div>
                                    <button @onclick="@(() => showDeleteModal = true)" class="px-4 py-2 bg-red-600 hover:bg-red-700 text-white rounded-lg transition-colors">
                                        Delete Account
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    private string activeTab = "personal";
    private bool unsavedChanges = false;
    private bool isEditing = false;
    private bool showPasswordModal = false;
    private bool showDeleteModal = false;
    private string newSubject = "";
    private bool isDarkMode = false; // Default to light mode
    private string newQualification = "";

    private List<SettingsTabItem> tabs = new()
    {
        new SettingsTabItem { Id = "personal", Label = "Personal Info" },
        new SettingsTabItem { Id = "professional", Label = "Professional" },
        new SettingsTabItem { Id = "preferences", Label = "Preferences" },
        new SettingsTabItem { Id = "security", Label = "Security" },
        new SettingsTabItem { Id = "account", Label = "Account" }
    };
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // Initialize theme preference from localStorage
            isDarkMode = await JSRuntime.InvokeAsync<bool>("getThemePreference");
            StateHasChanged();

            // Apply the initial theme, fallback to "dark" if null/empty
            await SetTheme(isDarkMode ? "dark" : "light");
        }

    }
    private UserSettings settings = new()
    {
        Personal = new PersonalInfo
        {
            Name = "Dr. Sarah Johnson",
            Email = "sarah.johnson@university.edu",
            Phone = "+1 (555) 123-4567",
            Bio = "Computer Science professor with 10+ years of experience in algorithms and data structures. Passionate about teaching and research in machine learning.",
            Avatar = "https://images.pexels.com/photos/3769021/pexels-photo-3769021.jpeg?auto=compress&cs=tinysrgb&w=150&h=150&dpr=2",
            Location = "New York, USA",
            Timezone = "America/New_York",
            Language = "English"
        },
        Professional = new ProfessionalInfo
        {
            Institution = "Delhi University",
            Department = "Computer Science",
            Designation = "Associate Professor",
            EmployeeId = "EMP001234",
            Subjects = new List<string> { "Data Structures", "Algorithms", "Machine Learning", "Database Systems" },
            Experience = "10 years",
            Qualifications = new List<string> { "Ph.D. Computer Science", "M.Tech Computer Science", "B.Tech Computer Science" }
        },
        Preferences = new PreferencesInfo
        {
            Notifications = new NotificationSettings
            {
                Email = true,
                Push = true,
                Sms = false,
                Reminders = true,
                Announcements = true,
                Messages = true
            },
            Privacy = new PrivacySettings
            {
                ProfileVisibility = "public",
                ShowEmail = false,
                ShowPhone = false,
                AllowMessages = true
            },
            Interface = new InterfaceSettings
            {
                Language = "English",
                DateFormat = "MM/DD/YYYY",
                TimeFormat = "12h",
                StartPage = "overview"
            }
        },
        Security = new SecurityInfo
        {
            TwoFactorEnabled = true,
            LastPasswordChange = "2024-01-15",
            ActiveSessions = 3
        }
    };

    private List<NotificationSettingItem> notificationSettings = new()
    {
        new NotificationSettingItem { Label = "Email", Description = "Receive email notifications", Value = true },
        new NotificationSettingItem { Label = "Push", Description = "Receive push notifications", Value = true },
        new NotificationSettingItem { Label = "SMS", Description = "Receive SMS notifications", Value = false },
        new NotificationSettingItem { Label = "Reminders", Description = "Class and assignment reminders", Value = true },
        new NotificationSettingItem { Label = "Announcements", Description = "Platform announcements", Value = true },
        new NotificationSettingItem { Label = "Messages", Description = "New message notifications", Value = true }
    };

    private List<LoginSessionItem> loginSessions = new()
    {
        new LoginSessionItem { Device = "Chrome on Windows", Location = "New York, USA", LastActive = "Current session", IsCurrent = true },
        new LoginSessionItem { Device = "Safari on iPhone", Location = "Mumbai, India", LastActive = "2 hours ago", IsCurrent = false },
        new LoginSessionItem { Device = "Firefox on Mac", Location = "Bangalore, India", LastActive = "1 day ago", IsCurrent = false }
    };

    private void HandleSave()
    {
        // In a real app, this would make an API call
        unsavedChanges = false;
        // Show success message
    }

    private void AddSubject()
    {
        if (!string.IsNullOrWhiteSpace(newSubject) && !settings.Professional.Subjects.Contains(newSubject))
        {
            settings.Professional.Subjects.Add(newSubject);
            newSubject = "";
            unsavedChanges = true;
        }
    }

    private void RemoveSubject(string subject)
    {
        settings.Professional.Subjects.Remove(subject);
        unsavedChanges = true;
    }

    private void AddQualification()
    {
        if (!string.IsNullOrWhiteSpace(newQualification) && !settings.Professional.Qualifications.Contains(newQualification))
        {
            settings.Professional.Qualifications.Add(newQualification);
            newQualification = "";
            unsavedChanges = true;
        }
    }

    private void RemoveQualification(string qualification)
    {
        settings.Professional.Qualifications.Remove(qualification);
        unsavedChanges = true;
    }

    private void ToggleNotification(string label)
    {
        var notification = notificationSettings.FirstOrDefault(n => n.Label == label);
        if (notification != null)
        {
            notification.Value = !notification.Value;
            unsavedChanges = true;
        }
    }

    private void TogglePrivacySetting(string setting)
    {
        switch (setting)
        {
            case "ShowEmail":
                settings.Preferences.Privacy.ShowEmail = !settings.Preferences.Privacy.ShowEmail;
                break;
            case "ShowPhone":
                settings.Preferences.Privacy.ShowPhone = !settings.Preferences.Privacy.ShowPhone;
                break;
            case "AllowMessages":
                settings.Preferences.Privacy.AllowMessages = !settings.Preferences.Privacy.AllowMessages;
                break;
        }
        unsavedChanges = true;
    }
        
    private List<NotificationSettingItem> GetNotificationSettings()
    {
        return new List<NotificationSettingItem>
        {
            new NotificationSettingItem { Label = "Email Notifications", Description = "Receive notifications via email", Value = settings.Preferences.Notifications.Email },
            new NotificationSettingItem { Label = "Push Notifications", Description = "Receive push notifications", Value = settings.Preferences.Notifications.Push },
            new NotificationSettingItem { Label = "SMS Notifications", Description = "Receive SMS notifications", Value = settings.Preferences.Notifications.Sms },
            new NotificationSettingItem { Label = "Reminders", Description = "Class and assignment reminders", Value = settings.Preferences.Notifications.Reminders },
            new NotificationSettingItem { Label = "Announcements", Description = "Platform announcements", Value = settings.Preferences.Notifications.Announcements },
            new NotificationSettingItem { Label = "Messages", Description = "New message notifications", Value = settings.Preferences.Notifications.Messages }
        };
    }

    private List<PrivacySettingItem> GetPrivacySettings()
    {
        return new List<PrivacySettingItem>
        {
            new PrivacySettingItem { Label = "Show Email in Profile", Value = settings.Preferences.Privacy.ShowEmail },
            new PrivacySettingItem { Label = "Show Phone in Profile", Value = settings.Preferences.Privacy.ShowPhone },
            new PrivacySettingItem { Label = "Allow Messages from Students", Value = settings.Preferences.Privacy.AllowMessages }
        };
    }

    public class SettingsTabItem
    {
        public string Id { get; set; } = "";
        public string Label { get; set; } = "";
    }

    public class UserSettings
    {
        public PersonalInfo Personal { get; set; } = new();
        public ProfessionalInfo Professional { get; set; } = new();
        public PreferencesInfo Preferences { get; set; } = new();
        public SecurityInfo Security { get; set; } = new();
    }

    public class PersonalInfo
    {
        public string Name { get; set; } = "";
        public string Email { get; set; } = "";
        public string Phone { get; set; } = "";
        public string Bio { get; set; } = "";
        public string Avatar { get; set; } = "";
        public string Location { get; set; } = "";
        public string Timezone { get; set; } = "";
        public string Language { get; set; } = "";
    }

    public class ProfessionalInfo
    {
        public string Institution { get; set; } = "";
        public string Department { get; set; } = "";
        public string Designation { get; set; } = "";
        public string EmployeeId { get; set; } = "";
        public List<string> Subjects { get; set; } = new();
        public string Experience { get; set; } = "";
        public List<string> Qualifications { get; set; } = new();
    }

    public class PreferencesInfo
    {
        public string Theme { get; set; } = "light";
        public NotificationSettings Notifications { get; set; } = new();
        public PrivacySettings Privacy { get; set; } = new();
        public InterfaceSettings Interface { get; set; } = new();
    }

    public class NotificationSettings
    {
        public bool Email { get; set; }
        public bool Push { get; set; }
        public bool Sms { get; set; }
        public bool Reminders { get; set; }
        public bool Announcements { get; set; }
        public bool Messages { get; set; }
    }

    public class PrivacySettings
    {
        public string ProfileVisibility { get; set; } = "public";
        public bool ShowEmail { get; set; }
        public bool ShowPhone { get; set; }
        public bool AllowMessages { get; set; }
    }

    public class InterfaceSettings
    {
        public string Language { get; set; } = "English";
        public string DateFormat { get; set; } = "MM/DD/YYYY";
        public string TimeFormat { get; set; } = "12h";
        public string StartPage { get; set; } = "overview";
    }

    public class SecurityInfo
    {
        public bool TwoFactorEnabled { get; set; }
        public string LastPasswordChange { get; set; } = "";
        public int ActiveSessions { get; set; }
    }

    public class NotificationSettingItem
    {
        public string Label { get; set; } = "";
        public string Description { get; set; } = "";
        public bool Value { get; set; }
    }

    public class PrivacySettingItem
    {
        public string Label { get; set; } = "";
        public bool Value { get; set; }
    }

    public class LoginSessionItem
    {
        public string Device { get; set; } = "";
        public string Location { get; set; } = "";
        public string LastActive { get; set; } = "";
        public bool IsCurrent { get; set; }
    }

    private async Task SetTheme(string theme)
    {
        settings.Preferences.Theme = theme;
        unsavedChanges = true;
        switch (theme)
        {
            case "light":
                await JSRuntime.InvokeVoidAsync("eval", "document.documentElement.classList.remove('dark')");
                break;
            case "dark":
                await JSRuntime.InvokeVoidAsync("eval", "document.documentElement.classList.add('dark')");
                break;
            case "auto":
                await JSRuntime.InvokeVoidAsync("eval", "document.documentElement.classList.add('dark')");
                break;
        }
    }
}