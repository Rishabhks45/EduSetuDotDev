@page "/teacher/dashboard/analytics"
@using EduSetu.Components.Layout
@using EduSetu.Domain.Enums
@using EduSetu.Domain.Entities
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize(Roles = "Teacher")]
@layout TeacherLayout

<PageTitle>Performance Analytics - Teacher Dashboard</PageTitle>

<div class="space-y-6">
    <div class="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-6">
        <div class="flex flex-col sm:flex-row sm:items-center justify-between gap-4">
            <div>
                <h2 class="text-2xl font-bold text-gray-900 dark:text-white">Performance Analytics</h2>
                <p class="text-gray-600 dark:text-gray-400 mt-1">Track your content performance and student engagement</p>
            </div>
            <div class="flex items-center gap-3">
                <select @bind="selectedPeriod" class="px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 bg-white dark:bg-gray-700 text-gray-900 dark:text-white">
                    <option value="week">Last Week</option>
                    <option value="month">Last Month</option>
                    <option value="quarter">Last Quarter</option>
                    <option value="year">Last Year</option>
                </select>
                <button class="p-2 text-gray-400 dark:text-gray-500 hover:text-gray-600 dark:hover:text-gray-400 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700">
                    <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15"></path>
                    </svg>
                </button>
                <button @onclick="@(() => showExportModal = true)" class="flex items-center gap-2 bg-blue-600 hover:bg-blue-700 dark:bg-blue-700 dark:hover:bg-blue-800 text-white px-4 py-2 rounded-lg font-medium transition-colors">
                    <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                    </svg>
                    Export
                </button>
            </div>
        </div>
    </div>

    <div class="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-6">
        <div class="flex items-center justify-between cursor-pointer mb-6" @onclick="@(() => ToggleSection("overview"))">
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white">Overview</h3>
            @if (IsExpanded("overview"))
            {
                <svg class="w-5 h-5 text-gray-600 dark:text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 15l7-7 7 7"></path>
                </svg>
            }
            else
            {
                <svg class="w-5 h-5 text-gray-600 dark:text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                </svg>
            }
        </div>

        @if (IsExpanded("overview"))
        {
            <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-6 gap-6">
                <div class="bg-blue-50 dark:bg-blue-900/20 rounded-lg p-4">
                    <div class="flex items-center justify-between mb-2">
                        <svg class="w-5 h-5 text-blue-600 dark:text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z"></path>
                            <circle cx="12" cy="12" r="3"></circle>
                        </svg>
                        <span class="text-green-600 dark:text-green-400 text-sm font-medium">+18%</span>
                    </div>
                    <div class="text-2xl font-bold text-gray-900 dark:text-white">@analyticsData.Overview.TotalViews.ToString("N0")</div>
                    <div class="text-sm text-gray-600 dark:text-gray-400">Total Views</div>
                </div>

                <div class="bg-green-50 dark:bg-green-900/20 rounded-lg p-4">
                    <div class="flex items-center justify-between mb-2">
                        <svg class="w-5 h-5 text-green-600 dark:text-green-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path>
                            <polyline points="7 10 12 15 17 10"></polyline>
                            <line x1="12" x2="12" y1="15" y2="3"></line>
                        </svg>
                        <span class="text-green-600 dark:text-green-400 text-sm font-medium">+25%</span>
                    </div>
                    <div class="text-2xl font-bold text-gray-900 dark:text-white">@analyticsData.Overview.TotalDownloads.ToString("N0")</div>
                    <div class="text-sm text-gray-600 dark:text-gray-400">Downloads</div>
                </div>

                <div class="bg-yellow-50 dark:bg-yellow-900/20 rounded-lg p-4">
                    <div class="flex items-center justify-between mb-2">
                        <svg class="w-5 h-5 text-yellow-600 dark:text-yellow-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z"></path>
                        </svg>
                        <span class="text-green-600 dark:text-green-400 text-sm font-medium">+0.2</span>
                    </div>
                    <div class="text-2xl font-bold text-gray-900 dark:text-white">@analyticsData.Overview.AverageRating</div>
                    <div class="text-sm text-gray-600 dark:text-gray-400">Avg Rating</div>
                </div>

                <div class="bg-purple-50 dark:bg-purple-900/20 rounded-lg p-4">
                    <div class="flex items-center justify-between mb-2">
                        <svg class="w-5 h-5 text-purple-600 dark:text-purple-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"></path>
                            <circle cx="9" cy="7" r="4"></circle>
                            <path d="M22 21v-2a4 4 0 0 0-3-3.87"></path>
                            <path d="M16 3.13a4 4 0 0 1 0 7.75"></path>
                        </svg>
                        <span class="text-green-600 dark:text-green-400 text-sm font-medium">+12%</span>
                    </div>
                    <div class="text-2xl font-bold text-gray-900 dark:text-white">@analyticsData.Overview.TotalStudents</div>
                    <div class="text-sm text-gray-600 dark:text-gray-400">Students</div>
                </div>

                <div class="bg-indigo-50 dark:bg-indigo-900/20 rounded-lg p-4">
                    <div class="flex items-center justify-between mb-2">
                        <svg class="w-5 h-5 text-indigo-600 dark:text-indigo-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                        </svg>
                        <span class="text-green-600 dark:text-green-400 text-sm font-medium">+8%</span>
                    </div>
                    <div class="text-2xl font-bold text-gray-900 dark:text-white">@analyticsData.Overview.ContentItems</div>
                    <div class="text-sm text-gray-600 dark:text-gray-400">Content Items</div>
                </div>

                <div class="bg-pink-50 dark:bg-pink-900/20 rounded-lg p-4">
                    <div class="flex items-center justify-between mb-2">
                        <svg class="w-5 h-5 text-pink-600 dark:text-pink-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 10V3L4 14h7v7l9-11h-7z"></path>
                        </svg>
                        <span class="text-green-600 dark:text-green-400 text-sm font-medium">+5%</span>
                    </div>
                    <div class="text-2xl font-bold text-gray-900 dark:text-white">@analyticsData.Overview.EngagementRate%</div>
                    <div class="text-sm text-gray-600 dark:text-gray-400">Engagement</div>
                </div>
            </div>
        }
    </div>

    <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        <div class="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-6">
            <div class="flex items-center justify-between mb-4">
                <div class="p-3 bg-blue-100 dark:bg-blue-900/50 rounded-lg">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-users text-blue-600 dark:text-blue-400"><path d="M16 21v-2a4 4 0 0 0-4-4H6a4 4 0 0 0-4 4v2"></path><circle cx="9" cy="7" r="4"></circle><path d="M22 21v-2a4 4 0 0 0-3-3.87"></path><path d="M16 3.13a4 4 0 0 1 0 7.75"></path></svg>
                </div>
                <span class="text-sm text-green-600 dark:text-green-400 font-medium">+15%</span>
            </div>
            <div class="text-2xl font-bold text-gray-900 dark:text-white mb-1">247</div>
            <div class="text-sm text-gray-600 dark:text-gray-400">Total Students</div>
        </div>

        <div class="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-6">
            <div class="flex items-center justify-between mb-4">
                <div class="p-3 bg-green-100 dark:bg-green-900/50 rounded-lg">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-eye text-green-600 dark:text-green-400"><path d="M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z"></path><circle cx="12" cy="12" r="3"></circle></svg>
                </div>
                <span class="text-sm text-green-600 dark:text-green-400 font-medium">+18%</span>
            </div>
            <div class="text-2xl font-bold text-gray-900 dark:text-white mb-1">15,420</div>
            <div class="text-sm text-gray-600 dark:text-gray-400">Content Views</div>
        </div>

        <div class="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-6">
            <div class="flex items-center justify-between mb-4">
                <div class="p-3 bg-purple-100 dark:bg-purple-900/50 rounded-lg">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-download text-purple-600 dark:text-purple-400"><path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"></path><polyline points="7 10 12 15 17 10"></polyline><line x1="12" x2="12" y1="15" y2="3"></line></svg>
                </div>
                <span class="text-sm text-green-600 dark:text-green-400 font-medium">+25%</span>
            </div>
            <div class="text-2xl font-bold text-gray-900 dark:text-white mb-1">2,845</div>
            <div class="text-sm text-gray-600 dark:text-gray-400">Downloads</div>
        </div>

        <div class="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-6">
            <div class="flex items-center justify-between mb-4">
                <div class="p-3 bg-yellow-100 dark:bg-yellow-900/50 rounded-lg">
                    <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-trending-up text-yellow-600 dark:text-yellow-400"><polyline points="22 7 13.5 15.5 8.5 10.5 2 17"></polyline><polyline points="16 7 22 7 22 13"></polyline></svg>
                </div>
                <span class="text-sm text-green-600 dark:text-green-400 font-medium">+0.2</span>
            </div>
            <div class="text-2xl font-bold text-gray-900 dark:text-white mb-1">4.8</div>
            <div class="text-sm text-gray-600 dark:text-gray-400">Avg Rating</div>
        </div>
    </div>

    <div class="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-6">
        <div class="flex items-center justify-between cursor-pointer mb-6" @onclick="@(() => ToggleSection("trends"))">
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white">Trends</h3>
            <div class="flex items-center gap-4">
                <div class="flex gap-2">
                    @foreach (var metric in new[] { "views", "downloads", "engagement" })
                    {
                        <button @onclick="@(() => selectedMetric = metric)" 
                                class="px-3 py-1 rounded-lg text-sm font-medium transition-colors @(selectedMetric == metric ? "bg-blue-600 text-white" : "bg-gray-100 dark:bg-gray-700 text-gray-600 dark:text-gray-300 hover:bg-gray-200 dark:hover:bg-gray-600")">
                            @(metric.Substring(0, 1).ToUpper() + metric.Substring(1))
                        </button>
                    }
                </div>
                @if (IsExpanded("trends"))
                {
                    <svg class="w-5 h-5 text-gray-600 dark:text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 15l7-7 7 7"></path>
                    </svg>
                }
                else
                {
                    <svg class="w-5 h-5 text-gray-600 dark:text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                    </svg>
                }
            </div>
        </div>

        @if (IsExpanded("trends"))
        {
            <div class="h-64 relative">
                <div class="flex items-end justify-between h-full gap-1">
                    @{
                        var metricData = GetMetricData();
                        var maxValue = GetMaxValue(metricData);
                        var recentData = metricData.Skip(Math.Max(0, metricData.Count - 15)).ToList();
                    }
                    @for (int i = 0; i < recentData.Count; i++)
                    {
                        var value = recentData[i];
                        var height = (double)value / maxValue * 100;
                        var label = analyticsData.Trends.Labels.Skip(Math.Max(0, analyticsData.Trends.Labels.Count - 15)).ElementAt(i);
                        
                        <div class="flex flex-col items-center gap-1 flex-1">
                            <div class="bg-blue-500 rounded-t min-w-[8px] hover:bg-blue-600 transition-colors cursor-pointer" 
                                 style="height: @(height)%" 
                                 title="@selectedMetric: @value.ToString("N0")">
                            </div>
                            <span class="text-xs text-gray-500 dark:text-gray-400 transform -rotate-45 origin-center">@label</span>
                        </div>
                    }
                </div>
                
                <div class="mt-4 text-center">
                    <p class="text-sm text-gray-600 dark:text-gray-400">
                        @(selectedMetric.Substring(0, 1).ToUpper() + selectedMetric.Substring(1)) over the last @selectedPeriod
                    </p>
                </div>
            </div>
        }
    </div>

    <div class="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-6">
        <div class="flex items-center justify-between cursor-pointer mb-6" @onclick="@(() => ToggleSection("content"))">
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white">Content Performance</h3>
            @if (IsExpanded("content"))
            {
                <svg class="w-5 h-5 text-gray-600 dark:text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 15l7-7 7 7"></path>
                </svg>
            }
            else
            {
                <svg class="w-5 h-5 text-gray-600 dark:text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                </svg>
            }
        </div>

        @if (IsExpanded("content"))
        {
            <div class="overflow-x-auto">
                <table class="min-w-full">
                    <thead>
                        <tr class="border-b border-gray-200 dark:border-gray-700">
                            <th class="text-left py-3 px-4 font-medium text-gray-700 dark:text-gray-300">Content</th>
                            <th class="text-left py-3 px-4 font-medium text-gray-700 dark:text-gray-300">Type</th>
                            <th class="text-left py-3 px-4 font-medium text-gray-700 dark:text-gray-300">Views</th>
                            <th class="text-left py-3 px-4 font-medium text-gray-700 dark:text-gray-300">Downloads</th>
                            <th class="text-left py-3 px-4 font-medium text-gray-700 dark:text-gray-300">Rating</th>
                            <th class="text-left py-3 px-4 font-medium text-gray-700 dark:text-gray-300">Engagement</th>
                            <th class="text-left py-3 px-4 font-medium text-gray-700 dark:text-gray-300">Trend</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var content in analyticsData.ContentPerformance)
                        {
                            <tr class="border-b border-gray-100 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700">
                                <td class="py-3 px-4">
                                    <div class="font-medium text-gray-900 dark:text-white">@content.Title</div>
                                </td>
                                <td class="py-3 px-4">
                                    <div class="flex items-center gap-2">
                                        @((MarkupString)GetTypeIcon(content.Type))
                                        <span class="capitalize text-sm text-gray-600 dark:text-gray-400">@content.Type</span>
                                    </div>
                                </td>
                                <td class="py-3 px-4 text-gray-900 dark:text-white">@content.Views.ToString("N0")</td>
                                <td class="py-3 px-4 text-gray-900 dark:text-white">
                                    @(content.Downloads > 0 ? content.Downloads.ToString("N0") : "-")
                                </td>
                                <td class="py-3 px-4">
                                    <div class="flex items-center gap-1">
                                        <svg class="w-3.5 h-3.5 text-yellow-400 fill-current" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z"></path>
                                        </svg>
                                        <span class="text-gray-900 dark:text-white">@content.Rating</span>
                                    </div>
                                </td>
                                <td class="py-3 px-4">
                                    <div class="flex items-center gap-2">
                                        <div class="w-16 bg-gray-200 dark:bg-gray-700 rounded-full h-2">
                                            <div class="bg-blue-600 h-2 rounded-full" style="width: @(content.Engagement)%"></div>
                                        </div>
                                        <span class="text-sm text-gray-600 dark:text-gray-400">@content.Engagement%</span>
                                    </div>
                                </td>
                                <td class="py-3 px-4">
                                    @((MarkupString)GetTrendIcon(content.Trend))
                                </td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        }
    </div>

    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <div class="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-6">
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Student Demographics</h3>
            <div class="space-y-4">
                @foreach (var demo in studentDemographics)
                {
                    <div class="flex items-center justify-between">
                        <div class="flex items-center space-x-3">
                            <div class="w-4 h-4 @demo.Color rounded-full"></div>
                            <span class="text-sm font-medium text-gray-900 dark:text-white">@demo.Category</span>
                        </div>
                        <div class="flex items-center space-x-3">
                            <div class="w-32 bg-gray-200 dark:bg-gray-700 rounded-full h-2">
                                <div class="@demo.Color h-2 rounded-full" style="width: @(demo.Percentage)%"></div>
                            </div>
                            <span class="text-sm text-gray-600 dark:text-gray-400 w-12 text-right">@demo.Percentage%</span>
                            <span class="text-sm text-gray-500 dark:text-gray-400 w-16 text-right">(@demo.Count)</span>
                        </div>
                    </div>
                }
            </div>
        </div>

        <div class="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-6">
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white mb-4">Recent Activity</h3>
            <div class="space-y-4">
                @foreach (var activity in recentActivity)
                {
                    <div class="flex items-center space-x-4 p-3 bg-gray-50 dark:bg-gray-700 rounded-lg">
                        <div class="p-2 @GetActivityTypeColor(activity.Type) rounded-lg">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                @if (activity.Type == "upload")
                                {
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
                                }
                                else if (activity.Type == "rating")
                                {
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z"></path>
                                }
                                else
                                {
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4"></path>
                                }
                            </svg>
                        </div>
                        <div class="flex-1">
                            <p class="text-sm text-gray-900 dark:text-white">@activity.Message</p>
                            <p class="text-xs text-gray-500 dark:text-gray-400">@activity.Time</p>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>

    <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <div class="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-6">
            <div class="flex items-center justify-between cursor-pointer mb-6" @onclick="@(() => ToggleSection("engagement"))">
                <h3 class="text-lg font-semibold text-gray-900 dark:text-white">Student Engagement</h3>
                @if (IsExpanded("engagement"))
                {
                    <svg class="w-5 h-5 text-gray-600 dark:text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 15l7-7 7 7"></path>
                    </svg>
                }
                else
                {
                    <svg class="w-5 h-5 text-gray-600 dark:text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                    </svg>
                }
            </div>

            @if (IsExpanded("engagement"))
            {
                <div class="space-y-4">
                    @foreach (var subject in analyticsData.StudentEngagement)
                    {
                        <div class="p-4 bg-gray-50 dark:bg-gray-700 rounded-lg">
                            <div class="flex items-center justify-between mb-3">
                                <h4 class="font-medium text-gray-900 dark:text-white">@subject.Subject</h4>
                                <span class="text-sm text-gray-600 dark:text-gray-400">@subject.ActiveStudents/@subject.TotalStudents active</span>
                            </div>
                            
                            <div class="grid grid-cols-2 gap-4 text-sm">
                                <div>
                                    <p class="text-gray-600 dark:text-gray-400">Avg. Time</p>
                                    <p class="font-medium text-gray-900 dark:text-white">@subject.AverageTime</p>
                                </div>
                                <div>
                                    <p class="text-gray-600 dark:text-gray-400">Completion</p>
                                    <p class="font-medium text-gray-900 dark:text-white">@subject.CompletionRate%</p>
                                </div>
                            </div>
                            
                            <div class="mt-3">
                                <div class="w-full bg-gray-200 dark:bg-gray-600 rounded-full h-2">
                                    <div class="bg-green-600 h-2 rounded-full" style="width: @(subject.CompletionRate)%"></div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>

        <div class="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-6">
            <div class="flex items-center justify-between cursor-pointer mb-6" @onclick="@(() => ToggleSection("time"))">
                <h3 class="text-lg font-semibold text-gray-900 dark:text-white">Time Analytics</h3>
                @if (IsExpanded("time"))
                {
                    <svg class="w-5 h-5 text-gray-600 dark:text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 15l7-7 7 7"></path>
                    </svg>
                }
                else
                {
                    <svg class="w-5 h-5 text-gray-600 dark:text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                    </svg>
                }
            </div>

            @if (IsExpanded("time"))
            {
                <div class="space-y-6">
                    <div>
                        <h4 class="font-medium text-gray-900 dark:text-white mb-3">Peak Activity Hours</h4>
                        <div class="flex flex-wrap gap-2">
                            @foreach (var hour in analyticsData.TimeAnalytics.PeakHours)
                            {
                                <span class="px-3 py-1 bg-blue-100 dark:bg-blue-900/50 text-blue-800 dark:text-blue-200 text-sm rounded-full">@hour</span>
                            }
                        </div>
                    </div>

                    <div>
                        <h4 class="font-medium text-gray-900 dark:text-white mb-3">Peak Activity Days</h4>
                        <div class="flex flex-wrap gap-2">
                            @foreach (var day in analyticsData.TimeAnalytics.PeakDays)
                            {
                                <span class="px-3 py-1 bg-green-100 dark:bg-green-900/50 text-green-800 dark:text-green-200 text-sm rounded-full">@day</span>
                            }
                        </div>
                    </div>

                    <div class="grid grid-cols-2 gap-4">
                        <div class="text-center p-4 bg-gray-50 dark:bg-gray-700 rounded-lg">
                            <svg class="mx-auto mb-2 text-gray-600 dark:text-gray-400 w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                            </svg>
                            <div class="text-lg font-bold text-gray-900 dark:text-white">@analyticsData.TimeAnalytics.AverageSessionTime</div>
                            <div class="text-sm text-gray-600 dark:text-gray-400">Avg Session</div>
                        </div>
                        
                        <div class="text-center p-4 bg-gray-50 dark:bg-gray-700 rounded-lg">
                            <svg class="mx-auto mb-2 text-gray-600 dark:text-gray-400 w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                            </svg>
                            <div class="text-lg font-bold text-gray-900 dark:text-white">@analyticsData.TimeAnalytics.BounceRate%</div>
                            <div class="text-sm text-gray-600 dark:text-gray-400">Bounce Rate</div>
                        </div>
                    </div>
                </div>
            }
        </div>
    </div>

    <div class="bg-white dark:bg-gray-800 rounded-xl shadow-sm border border-gray-200 dark:border-gray-700 p-6">
        <div class="flex items-center justify-between cursor-pointer mb-6" @onclick="@(() => ToggleSection("insights"))">
            <h3 class="text-lg font-semibold text-gray-900 dark:text-white">Insights & Recommendations</h3>
            @if (IsExpanded("insights"))
            {
                <svg class="w-5 h-5 text-gray-600 dark:text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 15l7-7 7 7"></path>
                </svg>
            }
            else
            {
                <svg class="w-5 h-5 text-gray-600 dark:text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7"></path>
                </svg>
            }
        </div>

        @if (IsExpanded("insights"))
        {
            <div class="space-y-4">
                <div class="p-4 bg-blue-50 dark:bg-blue-900/50 border border-blue-200 dark:border-blue-700 rounded-lg">
                    <div class="flex items-start gap-3">
                        <svg class="w-5 h-5 text-blue-600 dark:text-blue-400 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                        </svg>
                        <div>
                            <h4 class="font-medium text-blue-900 dark:text-blue-100 mb-1">High Engagement Content</h4>
                            <p class="text-blue-800 dark:text-blue-200 text-sm">Your Machine Learning videos have 92% engagement rate. Consider creating more video content for complex topics.</p>
                        </div>
                    </div>
                </div>

                <div class="p-4 bg-green-50 dark:bg-green-900/50 border border-green-200 dark:border-green-700 rounded-lg">
                    <div class="flex items-start gap-3">
                        <svg class="w-5 h-5 text-green-600 dark:text-green-400 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6"></path>
                        </svg>
                        <div>
                            <h4 class="font-medium text-green-900 dark:text-green-100 mb-1">Growing Audience</h4>
                            <p class="text-green-800 dark:text-green-200 text-sm">Your content views increased by 25% this month. Peak activity is on Tuesday-Thursday between 2-4 PM.</p>
                        </div>
                    </div>
                </div>

                <div class="p-4 bg-yellow-50 dark:bg-yellow-900/50 border border-yellow-200 dark:border-yellow-700 rounded-lg">
                    <div class="flex items-start gap-3">
                        <svg class="w-5 h-5 text-yellow-600 dark:text-yellow-400 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4M7.835 4.697a3.42 3.42 0 001.946-.806 3.42 3.42 0 014.438 0 3.42 3.42 0 001.946.806 3.42 3.42 0 013.138 3.138 3.42 3.42 0 00.806 1.946 3.42 3.42 0 010 4.438 3.42 3.42 0 00-.806 1.946 3.42 3.42 0 01-3.138 3.138 3.42 3.42 0 00-1.946.806 3.42 3.42 0 01-4.438 0 3.42 3.42 0 00-1.946-.806 3.42 3.42 0 01-3.138-3.138 3.42 3.42 0 00-.806-1.946 3.42 3.42 0 010-4.438 3.42 3.42 0 00.806-1.946 3.42 3.42 0 013.138-3.138z"></path>
                        </svg>
                        <div>
                            <h4 class="font-medium text-yellow-900 dark:text-yellow-100 mb-1">Content Optimization</h4>
                            <p class="text-yellow-800 dark:text-yellow-200 text-sm">Consider updating older content with lower engagement rates. Adding interactive elements could improve student participation.</p>
                        </div>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@code {
    private string selectedPeriod = "month";
    private string selectedMetric = "views";
    private bool showExportModal = false;
    private List<string> expandedSections = new() { "overview", "trends" };

    private AnalyticsData analyticsData = new()
    {
        Overview = new OverviewData
        {
            TotalViews = 45230,
            TotalDownloads = 12847,
            AverageRating = 4.7,
            TotalStudents = 247,
            ContentItems = 24,
            EngagementRate = 78.5
        },
        Trends = new TrendsData
        {
            Views = new List<int> { 1200, 1500, 1800, 2000, 1700, 1900, 2200, 2100, 2300, 2500, 2400, 2600, 2800, 3000, 2900, 3100, 3200, 3400, 3300, 3500, 3600, 3800, 3700, 3900, 4000, 4200, 4100, 4300, 4400, 4500 },
            Downloads = new List<int> { 450, 600, 750, 800, 650, 700, 850, 820, 900, 950, 920, 980, 1000, 1100, 1050, 1150, 1200, 1250, 1220, 1300, 1350, 1400, 1380, 1450, 1500, 1550, 1520, 1600, 1650, 1700 },
            Ratings = new List<double> { 4.2, 4.3, 4.4, 4.5, 4.4, 4.6, 4.7, 4.6, 4.8, 4.7, 4.8, 4.9, 4.8, 4.7, 4.8, 4.9, 4.8, 4.7, 4.8, 4.9, 4.8, 4.7, 4.8, 4.9, 4.8, 4.7, 4.8, 4.9, 4.8, 4.7 },
            Labels = Enumerable.Range(1, 30).Select(i => $"Day {i}").ToList()
        },
        ContentPerformance = new List<ContentPerformanceItem>
        {
            new ContentPerformanceItem { Id = "1", Title = "Advanced Data Structures", Type = "notes", Views = 5420, Downloads = 2340, Rating = 4.8, Engagement = 85, Trend = "up" },
            new ContentPerformanceItem { Id = "2", Title = "Machine Learning Basics", Type = "video", Views = 8930, Downloads = 0, Rating = 4.9, Engagement = 92, Trend = "up" },
            new ContentPerformanceItem { Id = "3", Title = "Database Systems PYQ", Type = "pyq", Views = 3210, Downloads = 1890, Rating = 4.6, Engagement = 76, Trend = "stable" },
            new ContentPerformanceItem { Id = "4", Title = "Algorithms Tutorial", Type = "video", Views = 2150, Downloads = 0, Rating = 4.5, Engagement = 68, Trend = "down" }
        },
        StudentEngagement = new List<StudentEngagementItem>
        {
            new StudentEngagementItem { Subject = "Data Structures", TotalStudents = 85, ActiveStudents = 72, AverageTime = "45 min", CompletionRate = 84.7 },
            new StudentEngagementItem { Subject = "Algorithms", TotalStudents = 78, ActiveStudents = 65, AverageTime = "38 min", CompletionRate = 83.3 },
            new StudentEngagementItem { Subject = "Database Systems", TotalStudents = 92, ActiveStudents = 81, AverageTime = "52 min", CompletionRate = 88.0 },
            new StudentEngagementItem { Subject = "Machine Learning", TotalStudents = 64, ActiveStudents = 58, AverageTime = "67 min", CompletionRate = 90.6 }
        },
        TimeAnalytics = new TimeAnalyticsData
        {
            PeakHours = new List<string> { "10:00 AM", "2:00 PM", "7:00 PM" },
            PeakDays = new List<string> { "Tuesday", "Wednesday", "Thursday" },
            AverageSessionTime = "42 minutes",
            BounceRate = 23.5
        }
    };

    private List<TopContentItem> topContent = new()
    {
        new TopContentItem { Title = "Advanced Data Structures", Type = "notes", Views = 5420, Downloads = 2340, Rating = 4.8 },
        new TopContentItem { Title = "Machine Learning Basics", Type = "video", Views = 8930, Downloads = 0, Rating = 4.9 },
        new TopContentItem { Title = "Database Systems Guide", Type = "notes", Views = 3450, Downloads = 1560, Rating = 4.7 },
        new TopContentItem { Title = "Python Programming", Type = "video", Views = 6780, Downloads = 0, Rating = 4.6 }
    };

    private List<StudentDemographicItem> studentDemographics = new()
    {
        new StudentDemographicItem { Category = "Computer Science", Percentage = 45, Count = 111, Color = "bg-blue-500" },
        new StudentDemographicItem { Category = "Mathematics", Percentage = 30, Count = 74, Color = "bg-green-500" },
        new StudentDemographicItem { Category = "Physics", Percentage = 15, Count = 37, Color = "bg-purple-500" },
        new StudentDemographicItem { Category = "Other", Percentage = 10, Count = 25, Color = "bg-yellow-500" }
    };

    private List<ActivityItem> recentActivity = new()
    {
        new ActivityItem { Type = "upload", Message = "New video lecture uploaded: \"Advanced Algorithms\"", Time = "2 hours ago" },
        new ActivityItem { Type = "rating", Message = "Received 5-star rating on \"Machine Learning Basics\"", Time = "4 hours ago" },
        new ActivityItem { Type = "download", Message = "25 new downloads on \"Database Systems Guide\"", Time = "6 hours ago" },
        new ActivityItem { Type = "comment", Message = "Student commented on \"Data Structures Notes\"", Time = "1 day ago" }
    };

    private List<PerformanceInsightItem> performanceInsights = new()
    {
        new PerformanceInsightItem { Title = "Engagement Rate", Value = "87%", Description = "Above average", BgColor = "bg-green-50", TextColor = "text-green-600" },
        new PerformanceInsightItem { Title = "Response Time", Value = "2.3h", Description = "Excellent", BgColor = "bg-blue-50", TextColor = "text-blue-600" },
        new PerformanceInsightItem { Title = "Student Satisfaction", Value = "4.8/5", Description = "Very high", BgColor = "bg-yellow-50", TextColor = "text-yellow-600" }
    };

    private List<int> GetMetricData()
    {
        return selectedMetric switch
        {
            "downloads" => analyticsData.Trends.Downloads,
            "engagement" => analyticsData.Trends.Ratings.Select(r => (int)(r * 20)).ToList(),
            _ => analyticsData.Trends.Views
        };
    }

    private int GetMaxValue(List<int> data)
    {
        return data.Count > 0 ? data.Max() : 0;
    }

    private void ToggleSection(string sectionId)
    {
        if (expandedSections.Contains(sectionId))
        {
            expandedSections.Remove(sectionId);
        }
        else
        {
            expandedSections.Add(sectionId);
        }
    }

    private bool IsExpanded(string sectionId)
    {
        return expandedSections.Contains(sectionId);
    }

    private string GetContentTypeColor(string type)
    {
        return type switch
        {
            "notes" => "bg-blue-100 text-blue-600",
            "video" => "bg-red-100 text-red-600",
            "pyq" => "bg-green-100 text-green-600",
            _ => "bg-gray-100 text-gray-600"
        };
    }

    private string GetActivityTypeColor(string type)
    {
        return type switch
        {
            "upload" => "bg-blue-100 text-blue-600 dark:bg-blue-900/50 dark:text-blue-400",
            "rating" => "bg-yellow-100 text-yellow-600 dark:bg-yellow-900/50 dark:text-yellow-400",
            "download" => "bg-green-100 text-green-600 dark:bg-green-900/50 dark:text-green-400",
            "comment" => "bg-purple-100 text-purple-600 dark:bg-purple-900/50 dark:text-purple-400",
            _ => "bg-gray-100 text-gray-600 dark:bg-gray-700 dark:text-gray-300"
        };
    }

    private string GetTrendIcon(string trend)
    {
        return trend switch
        {
            "up" => "<svg class='w-4 h-4 text-green-600 dark:text-green-400' fill='none' stroke='currentColor' viewBox='0 0 24 24'><path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M5 15l7-7 7 7'></path></svg>",
            "down" => "<svg class='w-4 h-4 text-red-600 dark:text-red-400' fill='none' stroke='currentColor' viewBox='0 0 24 24'><path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M19 9l-7 7-7-7'></path></svg>",
            _ => "<svg class='w-4 h-4 text-gray-600 dark:text-gray-400' fill='none' stroke='currentColor' viewBox='0 0 24 24'><path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M12 12m0 0'></path></svg>"
        };
    }

    private string GetTypeIcon(string type)
    {
        return type switch
        {
            "notes" => "<svg class='w-4 h-4 text-blue-600 dark:text-blue-400' fill='none' stroke='currentColor' viewBox='0 0 24 24'><path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z'></path></svg>",
            "video" => "<svg class='w-4 h-4 text-red-600 dark:text-red-400' fill='none' stroke='currentColor' viewBox='0 0 24 24'><path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M15 10l4.553-2.276A1 1 0 0121 8.618v6.764a1 1 0 01-1.447.894L15 14M5 18h8a2 2 0 002-2V8a2 2 0 00-2-2H5a2 2 0 00-2 2v8a2 2 0 002 2z'></path></svg>",
            "pyq" => "<svg class='w-4 h-4 text-green-600 dark:text-green-400' fill='none' stroke='currentColor' viewBox='0 0 24 24'><path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z'></path></svg>",
            _ => "<svg class='w-4 h-4 text-gray-600 dark:text-gray-400' fill='none' stroke='currentColor' viewBox='0 0 24 24'><path stroke-linecap='round' stroke-linejoin='round' stroke-width='2' d='M12 12m0 0'></path></svg>"
        };
    }

    public class AnalyticsData
    {
        public OverviewData Overview { get; set; } = new();
        public TrendsData Trends { get; set; } = new();
        public List<ContentPerformanceItem> ContentPerformance { get; set; } = new();
        public List<StudentEngagementItem> StudentEngagement { get; set; } = new();
        public TimeAnalyticsData TimeAnalytics { get; set; } = new();
    }

    public class OverviewData
    {
        public int TotalViews { get; set; }
        public int TotalDownloads { get; set; }
        public double AverageRating { get; set; }
        public int TotalStudents { get; set; }
        public int ContentItems { get; set; }
        public double EngagementRate { get; set; }
    }

    public class TrendsData
    {
        public List<int> Views { get; set; } = new();
        public List<int> Downloads { get; set; } = new();
        public List<double> Ratings { get; set; } = new();
        public List<string> Labels { get; set; } = new();
    }

    public class ContentPerformanceItem
    {
        public string Id { get; set; } = "";
        public string Title { get; set; } = "";
        public string Type { get; set; } = "";
        public int Views { get; set; }
        public int Downloads { get; set; }
        public double Rating { get; set; }
        public int Engagement { get; set; }
        public string Trend { get; set; } = "";
    }

    public class StudentEngagementItem
    {
        public string Subject { get; set; } = "";
        public int TotalStudents { get; set; }
        public int ActiveStudents { get; set; }
        public string AverageTime { get; set; } = "";
        public double CompletionRate { get; set; }
    }

    public class TimeAnalyticsData
    {
        public List<string> PeakHours { get; set; } = new();
        public List<string> PeakDays { get; set; } = new();
        public string AverageSessionTime { get; set; } = "";
        public double BounceRate { get; set; }
    }

    public class TopContentItem
    {
        public string Title { get; set; } = "";
        public string Type { get; set; } = "";
        public int Views { get; set; }
        public int Downloads { get; set; }
        public double Rating { get; set; }
    }

    public class StudentDemographicItem
    {
        public string Category { get; set; } = "";
        public int Percentage { get; set; }
        public int Count { get; set; }
        public string Color { get; set; } = "";
    }

    public class ActivityItem
    {
        public string Type { get; set; } = "";
        public string Message { get; set; } = "";
        public string Time { get; set; } = "";
    }

    public class PerformanceInsightItem
    {
        public string Title { get; set; } = "";
        public string Value { get; set; } = "";
        public string Description { get; set; } = "";
        public string BgColor { get; set; } = "";
        public string TextColor { get; set; } = "";
    }
}