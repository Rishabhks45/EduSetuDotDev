@page "/history"
@using System.ComponentModel.DataAnnotations
@inject NavigationManager NavigationManager

<div class="min-h-screen bg-gray-50 pt-16">
    <!-- Header -->
    <div class="bg-white shadow-sm border-b">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
            <div class="py-6">
                <div class="flex items-center justify-between">
                    <div>
                        <h1 class="text-3xl font-bold text-gray-900">Activity History</h1>
                        <p class="text-gray-600 mt-1">Track your learning journey and activity</p>
                    </div>
                    <div class="flex items-center space-x-3">
                        <button @onclick="ExportHistory" class="flex items-center gap-2 px-4 py-2 border border-gray-300 rounded-lg text-gray-700 hover:bg-gray-50 transition-colors">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                            </svg>
                            Export
                        </button>
                        <button @onclick="ClearHistory" class="flex items-center gap-2 px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors">
                            <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16"></path>
                            </svg>
                            Clear History
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Filters -->
    <div class="bg-white border-b border-gray-200 ">
        <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-4">
            <div class="flex items-center space-x-4">
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Activity Type</label>
                    <select @bind="SelectedActivityType" @bind:event="oninput" class="border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-primary-500 focus:border-primary-500">
                        <option value="">All Activities</option>
                        <option value="download">Downloads</option>
                        <option value="upload">Uploads</option>
                        <option value="study">Study Sessions</option>
                        <option value="search">Searches</option>
                        <option value="login">Logins</option>
                    </select>
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Date Range</label>
                    <select @bind="SelectedDateRange" @bind:event="oninput" class="border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-primary-500 focus:border-primary-500">
                        <option value="all">All Time</option>
                        <option value="today">Today</option>
                        <option value="week">This Week</option>
                        <option value="month">This Month</option>
                        <option value="year">This Year</option>
                    </select>
                </div>
                <div>
                    <label class="block text-sm font-medium text-gray-700 mb-1">Sort By</label>
                    <select @bind="SortBy" @bind:event="oninput" class="border border-gray-300 rounded-lg px-3 py-2 focus:ring-2 focus:ring-primary-500 focus:border-primary-500">
                        <option value="date">Date</option>
                        <option value="type">Type</option>
                        <option value="duration">Duration</option>
                    </select>
                </div>
            </div>
        </div>
    </div>

    <!-- Main Content -->
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div class="grid grid-cols-1 lg:grid-cols-4 gap-8">
            <!-- Left Column - Stats & Summary -->
            <div class="lg:col-span-1 space-y-6">
                <!-- Activity Summary -->
                <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                    <h3 class="text-lg font-semibold text-gray-900 mb-4">Activity Summary</h3>
                    <div class="space-y-4">
                        <div class="flex items-center justify-between">
                            <span class="text-gray-600">Total Activities</span>
                            <span class="font-semibold text-gray-900">@summary.TotalActivities</span>
                        </div>
                        <div class="flex items-center justify-between">
                            <span class="text-gray-600">Study Hours</span>
                            <span class="font-semibold text-gray-900">@summary.TotalStudyHours hrs</span>
                        </div>
                        <div class="flex items-center justify-between">
                            <span class="text-gray-600">Downloads</span>
                            <span class="font-semibold text-gray-900">@summary.TotalDownloads</span>
                        </div>
                        <div class="flex items-center justify-between">
                            <span class="text-gray-600">Uploads</span>
                            <span class="font-semibold text-gray-900">@summary.TotalUploads</span>
                        </div>
                        <div class="flex items-center justify-between">
                            <span class="text-gray-600">This Week</span>
                            <span class="font-semibold text-gray-900">@summary.ThisWeekActivities</span>
                        </div>
                    </div>
                </div>

                <!-- Weekly Activity Chart -->
                <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                    <h3 class="text-lg font-semibold text-gray-900 mb-4">Weekly Activity</h3>
                    <div class="space-y-3">
                        @foreach (var day in weeklyActivity)
                        {
                            <div class="flex items-center justify-between">
                                <span class="text-sm text-gray-600">@day.Day</span>
                                <div class="flex items-center space-x-2">
                                    <div class="w-20 bg-gray-200 rounded-full h-2">
                                        <div class="bg-primary-600 h-2 rounded-full" style="width: @(day.Percentage)%"></div>
                                    </div>
                                    <span class="text-xs text-gray-500">@day.Count</span>
                                </div>
                            </div>
                        }
                    </div>
                </div>

                <!-- Top Subjects -->
                <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                    <h3 class="text-lg font-semibold text-gray-900 mb-4">Top Subjects</h3>
                    <div class="space-y-3">
                        @foreach (var subject in topSubjects)
                        {
                            <div class="flex items-center justify-between">
                                <span class="text-sm text-gray-600">@subject.Name</span>
                                <span class="font-semibold text-gray-900">@subject.Count</span>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <!-- Right Column - Activity Timeline -->
            <div class="lg:col-span-3">
                <div class="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
                    <div class="flex items-center justify-between mb-6">
                        <h3 class="text-lg font-semibold text-gray-900">Activity Timeline</h3>
                        <div class="flex items-center space-x-2">
                            <button @onclick="PreviousPage" disabled="@(currentPage == 1)" class="px-3 py-1 border border-gray-300 rounded text-sm text-gray-700 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed">
                                Previous
                            </button>
                            <span class="text-sm text-gray-500">Page @currentPage of @totalPages</span>
                            <button @onclick="NextPage" disabled="@(currentPage == totalPages)" class="px-3 py-1 border border-gray-300 rounded text-sm text-gray-700 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed">
                                Next
                            </button>
                        </div>
                    </div>

                    <div class="space-y-4">
                        @foreach (var activity in paginatedActivities)
                        {
                            <div class="flex items-start space-x-4 p-4 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors">
                                <!-- Activity Icon -->
                                <div class="flex-shrink-0">
                                    <div class="@GetActivityIconColor(activity.Type) w-10 h-10 rounded-full flex items-center justify-center">
                                        <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            @if (activity.Type == "download")
                                            {
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4"></path>
                                            }
                                            else if (activity.Type == "upload")
                                            {
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12"></path>
                                            }
                                            else if (activity.Type == "study")
                                            {
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"></path>
                                            }
                                            else if (activity.Type == "search")
                                            {
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                                            }
                                            else
                                            {
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M11 16l-4-4m0 0l4-4m-4 4h14m-5 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h7a3 3 0 013 3v1"></path>
                                            }
                                        </svg>
                                    </div>
                                </div>

                                <!-- Activity Details -->
                                <div class="flex-1 min-w-0">
                                    <div class="flex items-center space-x-2 mb-1">
                                        <span class="@GetActivityBadgeColor(activity.Type) inline-flex items-center px-2 py-1 rounded-full text-xs font-medium">
                                            @activity.Type
                                        </span>
                                        <span class="text-sm text-gray-500">@activity.Timestamp.ToString("MMM dd, yyyy 'at' HH:mm")</span>
                                    </div>
                                    <h4 class="text-sm font-medium text-gray-900 mb-1">@activity.Title</h4>
                                    <p class="text-sm text-gray-600 mb-2">@activity.Description</p>
                                    
                                    @if (activity.Duration.HasValue)
                                    {
                                        <div class="flex items-center space-x-4 text-xs text-gray-500">
                                            <span>Duration: @activity.Duration.Value.TotalMinutes.ToString("F1") min</span>
                                            @if (activity.FileSize != null)
                                            {
                                                <span>Size: @activity.FileSize</span>
                                            }
                                        </div>
                                    }
                                </div>

                                <!-- Action Buttons -->
                                <div class="flex-shrink-0">
                                    <button @onclick="@(() => ViewActivityDetails(activity))" class="text-primary-600 hover:text-primary-700 text-sm font-medium">
                                        Details
                                    </button>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<ActivityItem> activities = new();
    private List<ActivityItem> filteredActivities = new();
    private List<ActivityItem> paginatedActivities = new();
    private ActivitySummary summary = new();
    private List<WeeklyActivity> weeklyActivity = new();
    private List<SubjectStats> topSubjects = new();
    private string selectedActivityType = "";
    private string selectedDateRange = "";
    private string sortBy = "date";
    private int currentPage = 1;
    private int totalPages = 1;
    private int pageSize = 20;

    private string SelectedActivityType
    {
        get => selectedActivityType;
        set
        {
            selectedActivityType = value;
            ApplyFilters();
        }
    }

    private string SelectedDateRange
    {
        get => selectedDateRange;
        set
        {
            selectedDateRange = value;
            ApplyFilters();
        }
    }

    private string SortBy
    {
        get => sortBy;
        set
        {
            sortBy = value;
            ApplyFilters();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadHistory();
    }

    private async Task LoadHistory()
    {
        activities = new List<ActivityItem>
        {
            new() {
                Id = 1,
                Type = "download",
                Title = "Downloaded Physics Notes",
                Description = "Class 12 Physics Chapter 1 - Electric Charges and Fields",
                Timestamp = DateTime.Now.AddHours(-2),
                Duration = TimeSpan.FromMinutes(5),
                FileSize = "2.4 MB"
            },
            new() {
                Id = 2,
                Type = "study",
                Title = "Study Session",
                Description = "Mathematics - Integration and Differentiation",
                Timestamp = DateTime.Now.AddHours(-4),
                Duration = TimeSpan.FromMinutes(45)
            },
            new() {
                Id = 3,
                Type = "upload",
                Title = "Uploaded Chemistry Lab Report",
                Description = "Experiment 5 - Acid-Base Titration",
                Timestamp = DateTime.Now.AddDays(-1),
                Duration = TimeSpan.FromMinutes(15),
                FileSize = "1.8 MB"
            },
            new() {
                Id = 4,
                Type = "search",
                Title = "Searched for Biology Notes",
                Description = "Cell Division and Mitosis",
                Timestamp = DateTime.Now.AddDays(-1).AddHours(-2),
                Duration = TimeSpan.FromMinutes(3)
            },
            new() {
                Id = 5,
                Type = "download",
                Title = "Downloaded PYQ Papers",
                Description = "Mathematics Previous Year Questions 2022",
                Timestamp = DateTime.Now.AddDays(-2),
                Duration = TimeSpan.FromMinutes(8),
                FileSize = "3.1 MB"
            },
            new() {
                Id = 6,
                Type = "study",
                Title = "Study Session",
                Description = "Physics - Wave Optics and Interference",
                Timestamp = DateTime.Now.AddDays(-2).AddHours(-3),
                Duration = TimeSpan.FromMinutes(60)
            },
            new() {
                Id = 7,
                Type = "login",
                Title = "Logged into EduSetu",
                Description = "Session started",
                Timestamp = DateTime.Now.AddDays(-3),
                Duration = TimeSpan.FromMinutes(1)
            }
        };

        summary = new ActivitySummary
        {
            TotalActivities = activities.Count,
            TotalStudyHours = 2.5,
            TotalDownloads = 3,
            TotalUploads = 1,
            ThisWeekActivities = 5
        };

        weeklyActivity = new List<WeeklyActivity>
        {
            new() { Day = "Mon", Count = 5, Percentage = 25 },
            new() { Day = "Tue", Count = 8, Percentage = 40 },
            new() { Day = "Wed", Count = 12, Percentage = 60 },
            new() { Day = "Thu", Count = 6, Percentage = 30 },
            new() { Day = "Fri", Count = 10, Percentage = 50 },
            new() { Day = "Sat", Count = 15, Percentage = 75 },
            new() { Day = "Sun", Count = 4, Percentage = 20 }
        };

        topSubjects = new List<SubjectStats>
        {
            new() { Name = "Physics", Count = 12 },
            new() { Name = "Mathematics", Count = 10 },
            new() { Name = "Chemistry", Count = 8 },
            new() { Name = "Biology", Count = 6 },
            new() { Name = "English", Count = 4 }
        };

        ApplyFilters();
    }

    private void ApplyFilters()
    {
        var filtered = activities.AsEnumerable();

        if (!string.IsNullOrEmpty(selectedActivityType))
        {
            filtered = filtered.Where(a => a.Type == selectedActivityType);
        }

        if (!string.IsNullOrEmpty(selectedDateRange))
        {
            var now = DateTime.Now;
            filtered = selectedDateRange switch
            {
                "today" => filtered.Where(a => a.Timestamp.Date == now.Date),
                "week" => filtered.Where(a => a.Timestamp >= now.AddDays(-7)),
                "month" => filtered.Where(a => a.Timestamp >= now.AddMonths(-1)),
                "year" => filtered.Where(a => a.Timestamp >= now.AddYears(-1)),
                _ => filtered
            };
        }

        filtered = sortBy switch
        {
            "date" => filtered.OrderByDescending(a => a.Timestamp),
            "type" => filtered.OrderBy(a => a.Type),
            "duration" => filtered.OrderByDescending(a => a.Duration),
            _ => filtered.OrderByDescending(a => a.Timestamp)
        };

        filteredActivities = filtered.ToList();
        currentPage = 1;
        totalPages = (int)Math.Ceiling((double)filteredActivities.Count / pageSize);
        UpdatePaginatedActivities();
    }

    private void UpdatePaginatedActivities()
    {
        var skip = (currentPage - 1) * pageSize;
        paginatedActivities = filteredActivities.Skip(skip).Take(pageSize).ToList();
    }

    private void PreviousPage()
    {
        if (currentPage > 1)
        {
            currentPage--;
            UpdatePaginatedActivities();
        }
    }

    private void NextPage()
    {
        if (currentPage < totalPages)
        {
            currentPage++;
            UpdatePaginatedActivities();
        }
    }

    private void ExportHistory()
    {
        Console.WriteLine("Exporting history...");
        // Implement export functionality
    }

    private void ClearHistory()
    {
        Console.WriteLine("Clearing history...");
        // Implement clear history functionality
    }

    private void ViewActivityDetails(ActivityItem activity)
    {
        Console.WriteLine($"Viewing details for activity: {activity.Title}");
        // Show activity details modal or navigate to details page
    }

    private string GetActivityIconColor(string type)
    {
        return type switch
        {
            "download" => "bg-blue-500",
            "upload" => "bg-green-500",
            "study" => "bg-purple-500",
            "search" => "bg-yellow-500",
            "login" => "bg-gray-500",
            _ => "bg-gray-500"
        };
    }

    private string GetActivityBadgeColor(string type)
    {
        return type switch
        {
            "download" => "bg-blue-100 text-blue-800",
            "upload" => "bg-green-100 text-green-800",
            "study" => "bg-purple-100 text-purple-800",
            "search" => "bg-yellow-100 text-yellow-800",
            "login" => "bg-gray-100 text-gray-800",
            _ => "bg-gray-100 text-gray-800"
        };
    }

    public class ActivityItem
    {
        public int Id { get; set; }
        public string Type { get; set; } = "";
        public string Title { get; set; } = "";
        public string Description { get; set; } = "";
        public DateTime Timestamp { get; set; }
        public TimeSpan? Duration { get; set; }
        public string? FileSize { get; set; }
    }

    public class ActivitySummary
    {
        public int TotalActivities { get; set; }
        public double TotalStudyHours { get; set; }
        public int TotalDownloads { get; set; }
        public int TotalUploads { get; set; }
        public int ThisWeekActivities { get; set; }
    }

    public class WeeklyActivity
    {
        public string Day { get; set; } = "";
        public int Count { get; set; }
        public double Percentage { get; set; }
    }

    public class SubjectStats
    {
        public string Name { get; set; } = "";
        public int Count { get; set; }
    }
} 