@page "/pyqs/{id}"
@using System.ComponentModel.DataAnnotations
@inject NavigationManager NavigationManager

<PageTitle>PYQ Details - EduSetu</PageTitle>

<div class="min-h-screen bg-gray-50 pt-16">
    <div class="container mx-auto px-4 py-8">
        @if (isLoading)
        {
            <div class="flex items-center justify-center min-h-[300px]">
                <div class="text-center">
                    <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600 mx-auto mb-4"></div>
                    <p class="text-gray-600">Loading PYQ...</p>
                </div>
            </div>
        }
        else if (pyq == null)
        {
            <div class="text-center py-12">
                <svg class="w-16 h-16 text-gray-400 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                </svg>
                <h3 class="text-xl font-semibold text-gray-800 mb-2">PYQ not found</h3>
                <p class="text-gray-600 mb-6">The previous year question you are looking for does not exist or has been removed.</p>
                <NavLink href="/pyqs" class="bg-primary-600 hover:bg-primary-700 text-white px-6 py-3 rounded-lg font-medium transition-colors">
                    Back to PYQs
                </NavLink>
            </div>
        }
        else
        {
            <div class="bg-white rounded-xl shadow-sm border border-gray-200 p-8 max-w-3xl mx-auto">
                <h1 class="text-3xl font-bold text-gray-800 mb-4">@pyq.Title</h1>
                <div class="flex items-center gap-4 mb-4 text-sm text-gray-500">
                    <span class="flex items-center gap-1">
                        <svg class="w-4 h-4 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                        </svg>
                        @pyq.Author
                    </span>
                    <span class="flex items-center gap-1">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                        </svg>
                        @FormatDate(pyq.UploadDate)
                    </span>
                    <span class="flex items-center gap-1">
                        <svg class="w-4 h-4 text-yellow-400 fill-current" fill="currentColor" viewBox="0 0 24 24">
                            <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"></path>
                        </svg>
                        @pyq.Rating
                    </span>
                </div>
                <div class="mb-6 text-gray-600">
                    <span class="font-medium">Subject:</span> @pyq.Subject &nbsp;|&nbsp;
                    <span class="font-medium">Course:</span> @pyq.Course
                </div>
                <div class="prose max-w-none mb-8">
                    @pyq.Description
                </div>
                <div class="flex gap-4">
                    <button class="bg-primary-600 hover:bg-primary-700 text-white px-6 py-2 rounded-lg font-medium transition-colors">Download</button>
                    <NavLink href="/pyqs" class="bg-gray-100 hover:bg-gray-200 text-gray-700 px-6 py-2 rounded-lg font-medium transition-colors">Back to PYQs</NavLink>
                </div>
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public string? id { get; set; }

    private PYQModel? pyq;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        await Task.Delay(500); // Simulate loading
        pyq = GetPYQById(id);
        isLoading = false;
    }

    private PYQModel? GetPYQById(string? pyqId)
    {
        // Simulate fetching from a data source
        var pyqs = new List<PYQModel>
        {
            new PYQModel { Id = "3", Title = "Physics Class 12 Previous Year Questions", Author = "CBSE Board", Subject = "Physics", Course = "Class 12", Description = "Collection of previous year physics questions for Class 12 CBSE board examinations.", Rating = 4.7, UploadDate = DateTime.Parse("2024-01-08") }
        };
        return pyqs.FirstOrDefault(p => p.Id == pyqId);
    }

    private string FormatDate(DateTime date)
    {
        var now = DateTime.Now;
        var diffTime = Math.Abs((now - date).TotalDays);
        var diffDays = (int)Math.Ceiling(diffTime);
        if (diffDays == 1) return "1 day ago";
        if (diffDays < 7) return $"{diffDays} days ago";
        if (diffDays < 30) return $"{Math.Ceiling(diffDays / 7.0)} weeks ago";
        return date.ToShortDateString();
    }

    public class PYQModel
    {
        public string Id { get; set; } = "";
        public string Title { get; set; } = "";
        public string Author { get; set; } = "";
        public string Subject { get; set; } = "";
        public string Course { get; set; } = "";
        public string Description { get; set; } = "";
        public double Rating { get; set; }
        public DateTime UploadDate { get; set; }
    }
} 