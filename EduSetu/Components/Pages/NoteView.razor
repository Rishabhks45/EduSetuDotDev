@page "/notes/{id}"
@using System.ComponentModel.DataAnnotations
@inject NavigationManager NavigationManager

<PageTitle>Note Details - EduSetu</PageTitle>

<div class="min-h-screen bg-gray-50 pt-16">
    <div class="container mx-auto px-4 py-8">
        @if (isLoading)
        {
            <div class="flex items-center justify-center min-h-[300px]">
                <div class="text-center">
                    <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-primary-600 mx-auto mb-4"></div>
                    <p class="text-gray-600">Loading note...</p>
                </div>
            </div>
        }
        else if (note == null)
        {
            <div class="text-center py-12">
                <svg class="w-16 h-16 text-gray-400 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                </svg>
                <h3 class="text-xl font-semibold text-gray-800 mb-2">Note not found</h3>
                <p class="text-gray-600 mb-6">The note you are looking for does not exist or has been removed.</p>
                <NavLink href="/notes" class="bg-primary-600 hover:bg-primary-700 text-white px-6 py-3 rounded-lg font-medium transition-colors">
                    Back to Notes
                </NavLink>
            </div>
        }
        else
        {
            <div class="bg-white rounded-xl shadow-sm border border-gray-200 p-8 max-w-3xl mx-auto">
                <h1 class="text-3xl font-bold text-gray-800 mb-4">@note.Title</h1>
                <div class="flex items-center gap-4 mb-4 text-sm text-gray-500">
                    <span class="flex items-center gap-1">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z"></path>
                        </svg>
                        @note.Author
                    </span>
                    <span class="flex items-center gap-1">
                        <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                        </svg>
                        @FormatDate(note.UploadDate)
                    </span>
                    <span class="flex items-center gap-1">
                        <svg class="w-4 h-4 text-yellow-400 fill-current" fill="currentColor" viewBox="0 0 24 24">
                            <path d="M12 2l3.09 6.26L22 9.27l-5 4.87 1.18 6.88L12 17.77l-6.18 3.25L7 14.14 2 9.27l6.91-1.01L12 2z"></path>
                        </svg>
                        @note.Rating
                    </span>
                </div>
                <div class="mb-6 text-gray-600">
                    <span class="font-medium">Subject:</span> @note.Subject &nbsp;|&nbsp;
                    <span class="font-medium">Course:</span> @note.Course
                </div>
                <div class="prose max-w-none mb-8">
                    @note.Description
                </div>
                <div class="flex gap-4">
                    <button class="bg-primary-600 hover:bg-primary-700 text-white px-6 py-2 rounded-lg font-medium transition-colors">Download</button>
                    <NavLink href="/notes" class="bg-gray-100 hover:bg-gray-200 text-gray-700 px-6 py-2 rounded-lg font-medium transition-colors">Back to Notes</NavLink>
                </div>
            </div>
        }
    </div>
</div>

@code {
    [Parameter]
    public string? id { get; set; }

    private NoteModel? note;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        await Task.Delay(500); // Simulate loading
        note = GetNoteById(id);
        isLoading = false;
    }

    private NoteModel? GetNoteById(string? noteId)
    {
        // Simulate fetching from a data source
        var notes = new List<NoteModel>
        {
            new NoteModel { Id = "1", Title = "Data Structures Complete Notes", Author = "Dr. Sarah Johnson", Subject = "Computer Science", Course = "B.Tech Computer Science", Description = "Comprehensive notes covering all fundamental data structures including arrays, linked lists, stacks, queues, trees, and graphs.", Rating = 4.8, UploadDate = DateTime.Parse("2024-01-15") },
            new NoteModel { Id = "5", Title = "Chemistry Organic Compounds Notes", Author = "Dr. Rajesh Kumar", Subject = "Chemistry", Course = "Class 12", Description = "Detailed notes on organic chemistry covering hydrocarbons, alcohols, aldehydes, and ketones.", Rating = 4.5, UploadDate = DateTime.Parse("2024-01-14") },
            new NoteModel { Id = "6", Title = "Biology NEET Preparation Guide", Author = "Dr. Anita Verma", Subject = "Biology", Course = "NEET Preparation", Description = "Comprehensive biology preparation guide for NEET with important topics and practice questions.", Rating = 4.8, UploadDate = DateTime.Parse("2024-01-05") }
        };
        return notes.FirstOrDefault(n => n.Id == noteId);
    }

    private string FormatDate(DateTime date)
    {
        var now = DateTime.Now;
        var diffTime = Math.Abs((now - date).TotalDays);
        var diffDays = (int)Math.Ceiling(diffTime);
        if (diffDays == 1) return "1 day ago";
        if (diffDays < 7) return $"{diffDays} days ago";
        if (diffDays < 30) return $"{Math.Ceiling(diffDays / 7.0)} weeks ago";
        return date.ToShortDateString();
    }

    public class NoteModel
    {
        public string Id { get; set; } = "";
        public string Title { get; set; } = "";
        public string Author { get; set; } = "";
        public string Subject { get; set; } = "";
        public string Course { get; set; } = "";
        public string Description { get; set; } = "";
        public double Rating { get; set; }
        public DateTime UploadDate { get; set; }
    }
} 