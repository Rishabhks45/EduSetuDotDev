@inherits LayoutComponentBase
@using EduSetu.Domain.Enums
@using EduSetu.Domain.Entities
@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager NavigationManager

<PageTitle>Teacher Dashboard - EduSetu</PageTitle>

<div class="min-h-screen bg-gray-50 flex">
    <!-- Sidebar -->
    <div class="@(sidebarOpen ? "w-64" : "w-16") bg-white shadow-lg border-r border-gray-200 transition-all duration-300 flex flex-col">
        <!-- Sidebar Header -->
        <div class="p-4 border-b border-gray-200">
            <div class="flex items-center justify-between">
                @if (sidebarOpen)
                {
                    <div class="flex items-center gap-2">
                        <div class="p-2 bg-blue-100 rounded-lg">
                            <svg class="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"></path>
                            </svg>
                        </div>
                        <div>
                            <h2 class="font-semibold text-gray-800">Teacher Portal</h2>
                            <p class="text-xs text-gray-500">Content & Classes</p>
                        </div>
                    </div>
                }
                <button @onclick="@ToggleSidebar" class="p-2 hover:bg-gray-100 rounded-lg transition-colors">
                    @if (sidebarOpen)
                    {
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                    }
                    else
                    {
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
                        </svg>
                    }
                </button>
            </div>
        </div>

        <!-- Navigation -->
        <nav class="flex-1 p-4 space-y-2">
            @foreach (var item in sidebarItems)
            {
                <button @onclick="@(() => NavigateToPage(item.Url))"
                        class="w-full flex items-center gap-3 px-3 py-3 rounded-lg transition-colors text-left @(IsActiveTab(item.Id) ? "bg-blue-50 text-blue-700 border border-blue-200" : "text-gray-600 hover:bg-gray-50 hover:text-gray-800")">
                    @if (item.Icon == "home")
                    {
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6"></path>
                        </svg>
                    }
                    else if (item.Icon == "file-text")
                    {
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                        </svg>
                    }
                    else if (item.Icon == "book-open")
                    {
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"></path>
                        </svg>
                    }
                    else if (item.Icon == "calendar")
                    {
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 7V3m8 4V3m-9 8h10M5 21h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v12a2 2 0 002 2z"></path>
                        </svg>
                    }
                    else if (item.Icon == "message-square")
                    {
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z"></path>
                        </svg>
                    }
                    else if (item.Icon == "bar-chart")
                    {
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                        </svg>
                    }
                    else if (item.Icon == "settings")
                    {
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"></path>
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"></path>
                        </svg>
                    }
                    else
                    {
                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
                        </svg>
                    }
                    @if (sidebarOpen)
                    {
                        <span class="font-medium">@item.Label</span>
                        @if (!string.IsNullOrEmpty(item.Badge))
                        {
                            <span class="ml-auto bg-blue-100 text-blue-600 text-xs px-2 py-1 rounded-full">
                                @item.Badge
                            </span>
                        }
                    }
                </button>
            }
        </nav>

        <!-- User Profile -->
        <div class="p-4 border-t border-gray-200">
            <div class="flex items-center gap-3">
                <img src="@(currentUser?.ProfilePictureUrl ?? "https://images.pexels.com/photos/3769021/pexels-photo-3769021.jpeg?auto=compress&cs=tinysrgb&w=150&h=150&dpr=2")"
                     alt="@currentUser?.FullName"
                     class="w-10 h-10 rounded-full border border-gray-300" />
                @if (sidebarOpen)
                {
                    <div class="flex-1 min-w-0">
                        <p class="text-sm font-medium text-gray-800 truncate">@currentUser?.FullName</p>
                        <p class="text-xs text-gray-500 truncate">@currentUser?.Email</p>
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- Main Content -->
    <div class="flex-1 flex flex-col">
        <!-- Header -->
        <header class="bg-white shadow-sm border-b border-gray-200 px-6 py-2">
            <div class="flex justify-between items-center">
                <div>
                    <h1 class="text-2xl font-bold text-gray-900">
                        @(GetCurrentPageTitle())
                    </h1>
                    <p class="text-gray-600">Welcome back, @currentUser?.FullName</p>
                </div>
                <div class="flex items-center gap-4">
                    <div class="relative">
                        <svg class="absolute left-3 top-3 text-gray-400 w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                        </svg>
                        <input type="text" placeholder="Search..."
                               class="pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 w-64" />
                    </div>
                    <button @onclick="@(() => showNotifications = !showNotifications)" class="relative p-2 text-gray-400 hover:text-gray-600 rounded-lg hover:bg-gray-100">
                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-bell "><path d="M6 8a6 6 0 0 1 12 0c0 7 3 9 3 9H3s3-2 3-9"></path><path d="M10.3 21a1.94 1.94 0 0 0 3.4 0"></path></svg>
                        @if (notifications > 0)
                        {
                            <span class="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center">
                                @notifications
                            </span>
                        }
                    </button>
                    
                    <!-- Notifications Dropdown -->
                    @if (showNotifications)
                    {
                        <div class="absolute top-full right-0 mt-2 w-80 bg-white rounded-lg shadow-lg border border-gray-200 z-50">
                            <div class="p-4 border-b border-gray-200">
                                <div class="flex items-center justify-between">
                                    <h3 class="font-semibold text-gray-900">Notifications</h3>
                                    <button @onclick="@(() => showNotifications = false)" class="text-gray-400 hover:text-gray-600">
                                        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                                        </svg>
                                    </button>
                                </div>
                            </div>
                            <div class="max-h-96 overflow-y-auto">
                                @foreach (var notification in notificationItems)
                                {
                                    <div class="p-4 border-b border-gray-100 hover:bg-gray-50 transition-colors">
                                        <div class="flex items-start gap-3">
                                            <div class="p-2 bg-blue-100 rounded-full">
                                                <svg class="w-4 h-4 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                                                </svg>
                                            </div>
                                            <div class="flex-1 min-w-0">
                                                <p class="text-sm font-medium text-gray-900">@notification.Title</p>
                                                <p class="text-sm text-gray-600 mt-1">@notification.Message</p>
                                                <p class="text-xs text-gray-500 mt-2">@notification.Time</p>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                            <div class="p-4 border-t border-gray-200">
                                <button class="w-full text-center text-sm text-blue-600 hover:text-blue-700 font-medium">
                                    View All Notifications
                                </button>
                            </div>
                        </div>
                    }
                    <button @onclick="@HandleLogout"
                            class="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-lg font-medium transition-colors">
                        Logout
                    </button>
                </div>
            </div>
        </header>

        <!-- Content Area -->
        <main class="flex-1 p-6 overflow-auto">
            @Body
        </main>
    </div>
</div>

@code {
    private bool sidebarOpen = true;
    private int notifications = 5;
    private User? currentUser;

    private bool showNotifications = false;
    private List<NotificationItem> notificationItems = new()
    {
        new NotificationItem { Title = "New Student Enrollment", Message = "Sarah Johnson has enrolled in your Data Structures course", Time = "2 minutes ago" },
        new NotificationItem { Title = "Assignment Submitted", Message = "5 new assignments submitted for review", Time = "15 minutes ago" },
        new NotificationItem { Title = "Course Rating", Message = "You received a 5-star rating for Machine Learning course", Time = "1 hour ago" },
        new NotificationItem { Title = "System Update", Message = "New features available in the teaching dashboard", Time = "2 hours ago" },
        new NotificationItem { Title = "Meeting Reminder", Message = "Faculty meeting scheduled for tomorrow at 10 AM", Time = "3 hours ago" }
    };

    // Sidebar items
    private List<TeacherSidebarItem> sidebarItems = new()
    {
        new TeacherSidebarItem { Id = "overview", Label = "Overview", Icon = "home", Url = "/teacher/dashboard" },
        new TeacherSidebarItem { Id = "my-content", Label = "My Content", Icon = "file-text", Url = "/teacher/dashboard/my-content", Badge = "12" },
        new TeacherSidebarItem { Id = "resources", Label = "Resources", Icon = "book-open", Url = "/teacher/dashboard/resources", Badge = null },
        new TeacherSidebarItem { Id = "schedule", Label = "Schedule", Icon = "calendar", Url = "/teacher/dashboard/schedule", Badge = "3" },
        new TeacherSidebarItem { Id = "messages", Label = "Messages", Icon = "message-square", Url = "/teacher/dashboard/messages", Badge = "8" },
        new TeacherSidebarItem { Id = "analytics", Label = "Performance Analytics", Icon = "bar-chart", Url = "/teacher/dashboard/analytics", Badge = null },
        new TeacherSidebarItem { Id = "settings", Label = "Settings", Icon = "settings", Url = "/teacher/dashboard/settings", Badge = null }
    };

    protected override void OnInitialized()
    {
        // Get current user from claims
        var user = HttpContextAccessor.HttpContext?.User;
        if (user?.Identity?.IsAuthenticated == true)
        {
            currentUser = new User
            {
                FirstName = user.FindFirst(System.Security.Claims.ClaimTypes.GivenName)?.Value ?? "",
                LastName = user.FindFirst(System.Security.Claims.ClaimTypes.Surname)?.Value ?? "",
                Email = user.FindFirst(System.Security.Claims.ClaimTypes.Email)?.Value ?? "",
                Role = UserRole.Teacher
            };
        }
    }

    private void ToggleSidebar()
    {
        sidebarOpen = !sidebarOpen;
    }

    private void NavigateToPage(string url)
    {
        NavigationManager.NavigateTo(url);
    }

    private bool IsActiveTab(string tabId)
    {
        var currentUri = NavigationManager.Uri;
        var baseUri = NavigationManager.BaseUri;
        var relativePath = currentUri.Replace(baseUri, "").TrimStart('/');
        
        var item = sidebarItems.FirstOrDefault(x => x.Id == tabId);
        if (item != null)
        {
            var itemPath = item.Url.TrimStart('/');
            var isActive = relativePath.StartsWith(itemPath, StringComparison.OrdinalIgnoreCase);
            
            // Debug output
            System.Diagnostics.Debug.WriteLine($"Tab: {tabId}, Current: {relativePath}, Item: {itemPath}, Active: {isActive}");
            
            return isActive;
        }
        return false;
    }

    private string GetCurrentPageTitle()
    {
        var currentUri = NavigationManager.Uri;
        var baseUri = NavigationManager.BaseUri;
        var relativePath = currentUri.Replace(baseUri, "").TrimStart('/');
        
        var item = sidebarItems.FirstOrDefault(x => {
            var itemPath = x.Url.TrimStart('/');
            return relativePath.StartsWith(itemPath, StringComparison.OrdinalIgnoreCase);
        });
        return item?.Label ?? "Dashboard";
    }

    private void HandleLogout()
    {
        NavigationManager.NavigateTo("/api/auth/logout", forceLoad: true);
    }

    public class TeacherSidebarItem
    {
        public string Id { get; set; } = "";
        public string Label { get; set; } = "";
        public string Icon { get; set; } = "";
        public string Url { get; set; } = "";
        public string? Badge { get; set; }
    }

    public class NotificationItem
    {
        public string Title { get; set; } = "";
        public string Message { get; set; } = "";
        public string Time { get; set; } = "";
    }
}
