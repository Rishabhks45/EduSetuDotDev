@using EduSetu.Domain.Enums
@using EduSetu.Domain.Entities
@inject IHttpContextAccessor HttpContextAccessor
@inject NavigationManager NavigationManager
@inherits LayoutComponentBase
@inject IJSRuntime JSRuntime
@using Microsoft.JSInterop

<PageTitle>Teacher Dashboard - EduSetu</PageTitle>

<div class="h-screen bg-gray-50 dark:bg-gray-900 flex overflow-hidden" @onclick="@(() => showNotifications = false)">
    <!-- Sidebar -->
    <div class="@(sidebarOpen ? "w-64" : "w-16") bg-white dark:bg-gray-800 shadow-lg border-r border-gray-200 dark:border-gray-700 transition-all duration-300 flex flex-col h-screen fixed top-0 left-0 z-40">

        <!-- Sidebar Header -->
        <div class="p-4 border-b border-gray-200 dark:border-gray-700 flex-shrink-0">
            <div class="flex items-center justify-between">
                @if (sidebarOpen)
                {
                    <div class="flex items-center gap-2">
                        <div class="p-2 bg-blue-100 dark:bg-blue-900 rounded-lg">
                            <svg class="w-5 h-5 text-blue-600 dark:text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6.253v13m0-13C10.832 5.477 9.246 5 7.5 5S4.168 5.477 3 6.253v13C4.168 18.477 5.754 18 7.5 18s3.332.477 4.5 1.253m0-13C13.168 5.477 14.754 5 16.5 5c1.746 0 3.332.477 4.5 1.253v13C19.832 18.477 18.246 18 16.5 18c-1.746 0-3.332.477-4.5 1.253"></path>
                            </svg>
                        </div>
                        <div>
                            <h2 class="font-semibold text-gray-800 dark:text-white">Teacher Portal</h2>
                            <p class="text-xs text-gray-500 dark:text-gray-400">Content & Classes</p>
                        </div>
                    </div>
                }
                <button @onclick="@ToggleSidebar" class="p-2 hover:bg-gray-100 dark:hover:bg-gray-700 rounded-lg transition-colors">
                    @if (sidebarOpen)
                    {
                        <svg class="w-5 h-5 text-gray-600 dark:text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                        </svg>
                    }
                    else
                    {
                        <svg class="w-5 h-5 text-gray-600 dark:text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
                        </svg>
                    }
                </button>
            </div>
        </div>

        <!-- Navigation -->
        <nav class="flex-1 p-4 space-y-2 overflow-y-auto min-h-0">
            @foreach (var item in sidebarItems)
            {
                <button @onclick="@(() => NavigateToPage(item.Url))"
                        style="padding-left: 5px;"
                        class="w-full flex items-center gap-3 py-3 rounded-lg transition-colors text-left @(IsActiveTab(item.Id) ? "bg-blue-50 dark:bg-blue-900/30 text-blue-700 dark:text-blue-400 border border-blue-200 dark:border-blue-800" : "text-gray-600 dark:text-gray-300 hover:bg-gray-50 dark:hover:bg-gray-700 hover:text-gray-800 dark:hover:text-white")">
                    @switch (item.Icon)
                    {
                        case "home":
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-home">
                                <path d="m3 9 9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path>
                                <polyline points="9 22 9 12 15 12 15 22"></polyline>
                            </svg>
                            break;

                        case "file-text":
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-file-text">
                                <path d="M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z"></path>
                                <polyline points="14,2 14,8 20,8"></polyline>
                                <line x1="16" y1="13" x2="8" y2="13"></line>
                                <line x1="16" y1="17" x2="8" y2="17"></line>
                                <polyline points="10,9 9,9 8,9"></polyline>
                            </svg>
                            break;

                        case "book-open":
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-book-open">
                                <path d="M2 3h6a4 4 0 0 1 4 4v14H2V3z"></path>
                                <path d="M22 3h-6a4 4 0 0 0-4 4v14h10V3z"></path>
                            </svg>
                            break;

                        case "calendar":
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-calendar">
                                <rect x="3" y="4" width="18" height="18" rx="2" ry="2"></rect>
                                <line x1="16" y1="2" x2="16" y2="6"></line>
                                <line x1="8" y1="2" x2="8" y2="6"></line>
                                <line x1="3" y1="10" x2="21" y2="10"></line>
                            </svg>
                            break;

                        case "message-square":
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-message-square">
                                <path d="M21 15a2 2 0 0 1-2 2H7l-4 4V5a2 2 0 0 1 2-2h14a2 2 0 0 1 2 2z"></path>
                            </svg>
                            break;

                        case "bar-chart":
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-bar-chart-3">
                                <path d="M3 3v18h18"></path>
                                <path d="M18.7 8l-5.1 5.2-2.8-2.7L7 14.3"></path>
                            </svg>
                            break;

                        case "settings":
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-settings">
                                <path d="M12.22 2h-.44a2 2 0 0 0-2 2v.18a2 2 0 0 1-1 1.73l-.43.25a2 2 0 0 1-2 0l-.15-.08a2 2 0 0 0-2.73.73l-.22.38a2 2 0 0 0 .73 2.73l.15.1a2 2 0 0 1 1 1.72v.51a2 2 0 0 1-1 1.74l-.15.09a2 2 0 0 0-.73 2.73l.22.38a2 2 0 0 0 2.73.73l.15-.08a2 2 0 0 1 2 0l.43.25a2 2 0 0 1 1 1.73V20a2 2 0 0 0 2 2h.44a2 2 0 0 0 2-2v-.18a2 2 0 0 1 1-1.73l.43-.25a2 2 0 0 1 2 0l.15.08a2 2 0 0 0 2.73-.73l.22-.39a2 2 0 0 0-.73-2.73l-.15-.08a2 2 0 0 1-1-1.74v-.5a2 2 0 0 1 1-1.74l.15-.09a2 2 0 0 0 .73-2.73l-.22-.38a2 2 0 0 0-2.73-.73l-.15.08a2 2 0 0 1-2 0l-.43-.25a2 2 0 0 1-1-1.73V4a2 2 0 0 0-2-2z"></path>
                                <circle cx="12" cy="12" r="3"></circle>
                            </svg>
                            break;

                        default:
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-help-circle">
                                <circle cx="12" cy="12" r="10"></circle>
                                <path d="M9.09 9a3 3 0 0 1 5.83 1c0 2-3 3-3 3"></path>
                                <path d="M12 17h.01"></path>
                            </svg>
                            break;
                    }
                    @if (sidebarOpen)
                    {
                        <span class="font-medium">@item.Label</span>
                        @if (!string.IsNullOrEmpty(item.Badge))
                        {
                            <span class="ml-auto bg-blue-100 dark:bg-blue-900 text-blue-600 dark:text-blue-400 text-xs px-2 py-1 rounded-full">
                                @item.Badge
                            </span>
                        }
                    }
                </button>
            }
        </nav>

        <!-- User Profile -->
        <div class="p-4 border-t border-gray-200 dark:border-gray-700 flex-shrink-0">
            <div class="flex items-center gap-3">
                <img src="@(currentUser?.ProfilePictureUrl ?? "https://images.pexels.com/photos/3769021/pexels-photo-3769021.jpeg?auto=compress&cs=tinysrgb&w=150&h=150&dpr=2")"
                     alt="@currentUser?.FullName"
                     class="w-10 h-10 rounded-full border border-gray-300 dark:border-gray-600" />
                @if (sidebarOpen)
                {
                    <div class="flex-1 min-w-0">
                        <p class="text-sm font-medium text-gray-800 dark:text-white truncate">@currentUser?.FullName</p>
                        <p class="text-xs text-gray-500 dark:text-gray-400 truncate">@currentUser?.Email</p>
                    </div>
                }
            </div>
        </div>
    </div>

    <!-- Main Content -->
    <div class="@(sidebarOpen ? "ml-64" : "ml-16") flex-1 flex flex-col min-h-0 transition-all duration-300">
        <!-- Header -->
        <header class="bg-gray-50 dark:bg-gray-900 shadow-sm border-b border-gray-200 dark:border-gray-700 px-6 py-2 fixed top-0 right-0 left-0 z-30" style="left: @(sidebarOpen ? "16rem" : "4rem")">
            <div class="flex justify-between items-center">
                <div>
                    <h1 class="text-2xl font-bold text-gray-900 dark:text-white">@(GetCurrentPageTitle())</h1>
                    <p class="text-gray-600 dark:text-gray-400">Welcome back, @(currentUser?.FirstName ?? "Teacher")</p>
                </div>
                <div class="flex items-center gap-4">

                    <!-- Home Button -->
                    <a href="/" class="flex items-center gap-2 text-gray-700 dark:text-gray-300 hover:text-blue-600 dark:hover:text-blue-400 transition-colors bg-white dark:bg-gray-800 px-4 py-2 rounded-lg border border-gray-200 dark:border-gray-700 hover:border-blue-200 dark:hover:border-blue-800">
                        <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-home">
                            <path d="m3 9 9-7 9 7v11a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2z"></path>
                            <polyline points="9 22 9 12 15 12 15 22"></polyline>
                        </svg>
                        <span class="font-medium">Home Page</span>
                    </a>

                    <!-- Search -->
                    <div class="relative">
                        <svg class="absolute left-3 top-3 text-gray-400 dark:text-gray-500 w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                        </svg>
                        <input type="text" placeholder="Search..." class="pl-10 pr-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 w-64 bg-white dark:bg-gray-700 text-gray-900 dark:text-white placeholder-gray-500 dark:placeholder-gray-400">
                    </div>

                    <!-- Dark Mode Toggle Button -->
                    <button @onclick="ToggleTheme" 
                            class="relative p-2 text-gray-400 dark:text-gray-500 hover:text-gray-600 dark:hover:text-gray-400 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700">
                        @if (isDarkMode)
                        {
                            <!-- Sun icon for light mode -->
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-sun">
                                <circle cx="12" cy="12" r="4"></circle>
                                <path d="M12 2v2"></path>
                                <path d="M12 20v2"></path>
                                <path d="M4.93 4.93l1.41 1.41"></path>
                                <path d="M17.66 17.66l1.41 1.41"></path>
                                <path d="M2 12h2"></path>
                                <path d="M20 12h2"></path>
                                <path d="M6.34 17.66l-1.41 1.41"></path>
                                <path d="M19.07 4.93l-1.41 1.41"></path>
                            </svg>
                        }
                        else
                        {
                            <!-- Moon icon for dark mode -->
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-moon">
                                <path d="M12 3a6 6 0 0 0 9 9 9 9 0 1 1-9-9Z"></path>
                            </svg>
                        }
                    </button>

                    <div class="relative">
                        <button @onclick="@(() => showNotifications = !showNotifications)" @onclick:stopPropagation="true" class="relative p-2 text-gray-400 dark:text-gray-500 hover:text-gray-600 dark:hover:text-gray-400 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700">
                            <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-bell "><path d="M6 8a6 6 0 0 1 12 0c0 7 3 9 3 9H3s3-2 3-9"></path><path d="M10.3 21a1.94 1.94 0 0 0 3.4 0"></path></svg>
                            @if (notifications > 0)
                            {
                                <span class="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center">
                                    @notifications
                                </span>
                            }
                        </button>
                        
                        @if (showNotifications)
                        {
                            <div class="absolute top-full right-0 mt-2 w-80 bg-white dark:bg-gray-800 rounded-lg shadow-lg border border-gray-200 dark:border-gray-700 z-50" @onclick:stopPropagation="true">
                                <div class="p-4 border-b border-gray-200 dark:border-gray-700">
                                    <div class="flex items-center justify-between">
                                        <h3 class="font-semibold text-gray-900 dark:text-white">Notifications</h3>
                                        <button @onclick="@(() => showNotifications = false)" class="text-gray-400 dark:text-gray-500 hover:text-gray-600 dark:hover:text-gray-400">
                                            <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                                            </svg>
                                        </button>
                                    </div>
                                </div>
                                <div class="max-h-96 overflow-y-auto">
                                    @foreach (var notification in notificationItems)
                                    {
                                        <div class="p-4 border-b border-gray-100 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors">
                                            <div class="flex items-start gap-3">
                                                <div class="p-2 bg-blue-100 dark:bg-blue-900 rounded-full">
                                                    <svg class="w-4 h-4 text-blue-600 dark:text-blue-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
                                                    </svg>
                                                </div>
                                                <div class="flex-1 min-w-0">
                                                    <p class="text-sm font-medium text-gray-900 dark:text-white">@notification.Title</p>
                                                    <p class="text-sm text-gray-600 dark:text-gray-300 mt-1">@notification.Message</p>
                                                    <p class="text-xs text-gray-500 dark:text-gray-400 mt-2">@notification.Time</p>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                                <div class="p-4 border-t border-gray-200 dark:border-gray-700">
                                    <button class="w-full text-center text-sm text-blue-600 dark:text-blue-400 hover:text-blue-700 dark:hover:text-blue-300 font-medium">
                                        View All Notifications
                                    </button>
                                </div>
                            </div>
                        }
                    </div>

                    <button @onclick="@HandleLogout"
                            class="bg-blue-600 hover:bg-blue-700 dark:bg-blue-700 dark:hover:bg-blue-800 text-white px-4 py-2 rounded-lg font-medium transition-colors">
                        Logout
                    </button>
                </div>
            </div>
        </header>

        <!-- Content Area -->
        <main class="flex-1 p-6 overflow-y-auto h-full" style="margin-top: 6rem;">
            @Body
        </main>
        <EduSetu.Components.Shared.Notification></EduSetu.Components.Shared.Notification>
    </div>
</div>

@code {
    private bool sidebarOpen = true;
    private int notifications = 5;
    private User? currentUser;
    private string headerName="";

    private bool showNotifications = false;
    private List<NotificationItem> notificationItems = new()
    {
        new NotificationItem { Title = "New Student Enrollment", Message = "Sarah Johnson has enrolled in your Data Structures course", Time = "2 minutes ago" },
        new NotificationItem { Title = "Assignment Submitted", Message = "5 new assignments submitted for review", Time = "15 minutes ago" },
        new NotificationItem { Title = "Course Rating", Message = "You received a 5-star rating for Machine Learning course", Time = "1 hour ago" },
        new NotificationItem { Title = "System Update", Message = "New features available in the teaching dashboard", Time = "2 hours ago" },
        new NotificationItem { Title = "Meeting Reminder", Message = "Faculty meeting scheduled for tomorrow at 10 AM", Time = "3 hours ago" }
    };

    // Sidebar items
    private List<TeacherSidebarItem> sidebarItems = new()
    {
        new TeacherSidebarItem { Id = "overview", Label = "Overview", Icon = "home", Url = "/teacher/dashboard" },
        new TeacherSidebarItem { Id = "my-content", Label = "My Content", Icon = "file-text", Url = "/teacher/dashboard/my-content", Badge = "12" },
        new TeacherSidebarItem { Id = "resources", Label = "Resources", Icon = "book-open", Url = "/teacher/dashboard/resources", Badge = null },
        new TeacherSidebarItem { Id = "schedule", Label = "Schedule", Icon = "calendar", Url = "/teacher/dashboard/schedule", Badge = "3" },
        new TeacherSidebarItem { Id = "messages", Label = "Messages", Icon = "message-square", Url = "/teacher/dashboard/messages", Badge = "8" },
        new TeacherSidebarItem { Id = "analytics", Label = "Performance Analytics", Icon = "bar-chart", Url = "/teacher/dashboard/analytics", Badge = null },
        new TeacherSidebarItem { Id = "settings", Label = "Settings", Icon = "settings", Url = "/teacher/dashboard/settings", Badge = null }
    };

    protected override void OnInitialized()
    {
        // Get current user from claims
        var user = HttpContextAccessor.HttpContext?.User;
        if (user?.Identity?.IsAuthenticated == true)
        {
            currentUser = new User
            {
                FirstName = user.FindFirst(System.Security.Claims.ClaimTypes.GivenName)?.Value ?? "",
                LastName = user.FindFirst(System.Security.Claims.ClaimTypes.Surname)?.Value ?? "",
                Email = user.FindFirst(System.Security.Claims.ClaimTypes.Email)?.Value ?? "",
                Role = UserRole.Teacher
            };
        }
    }

    private void ToggleSidebar()
    {
        sidebarOpen = !sidebarOpen;
    }

    private void NavigateToPage(string url)
    {
        NavigationManager.NavigateTo(url);
    }

    private bool IsActiveTab(string tabId)
    {
        var currentUri = NavigationManager.Uri;
        var baseUri = NavigationManager.BaseUri;
        var relativePath = currentUri.Replace(baseUri, "").TrimStart('/');
        
        var item = sidebarItems.FirstOrDefault(x => x.Id == tabId);
        if (item != null)
        {
            var itemPath = item.Url.TrimStart('/');
            
            // Special handling for Overview (home) page
            if (tabId == "overview")
            {
                // Overview should be active for exact match or when no other specific page is active
                var isExactMatch = relativePath.Equals(itemPath, StringComparison.OrdinalIgnoreCase);
                var isBasePath = relativePath.Equals("teacher/dashboard", StringComparison.OrdinalIgnoreCase);
                return isExactMatch || isBasePath;
            }
            
            var isActive = relativePath.StartsWith(itemPath, StringComparison.OrdinalIgnoreCase);
            
            return isActive;
        }
        return false;
    }

    private string GetCurrentPageTitle()
    {
        // Get the relative path, remove query strings and trailing slashes
        var relativePath = NavigationManager.ToBaseRelativePath(NavigationManager.Uri)
                                            .Split('?')[0]
                                            .Trim('/')
                                            .ToLowerInvariant();

        // Normalize item URLs and compare
        var matchedItem = sidebarItems
            .OrderByDescending(x => x.Url.Length) // Ensure longest match comes first
            .FirstOrDefault(x =>
            {
                var itemPath = x.Url.Trim('/').ToLowerInvariant();
                return relativePath == itemPath || relativePath.StartsWith(itemPath + "/");
            });

        // Fallback title
        return matchedItem?.Label ?? $"Dashboard";
    }


    private void HandleLogout()
    {
        NavigationManager.NavigateTo("/api/auth/logout", forceLoad: true);
    }

    public class TeacherSidebarItem
    {
        public string Id { get; set; } = "";
        public string Label { get; set; } = "";
        public string Icon { get; set; } = "";
        public string Url { get; set; } = "";
        public string? Badge { get; set; }
    }

    public class NotificationItem
    {
        public string Title { get; set; } = "";
        public string Message { get; set; } = "";
        public string Time { get; set; } = "";
    }

    private bool isDarkMode = false;
    private DotNetObjectReference<TeacherLayout>? objRef;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            objRef = DotNetObjectReference.Create(this);
            
            // Initialize theme preference from localStorage
            isDarkMode = await JSRuntime.InvokeAsync<bool>("getThemePreference");
            StateHasChanged();

            // Apply the initial theme
            await ApplyTheme();
        }
    }

    private async Task ToggleTheme()
    {
        isDarkMode = !isDarkMode;
        await ApplyTheme();
        StateHasChanged();
    }

    private async Task ApplyTheme()
    {
        // Save preference to localStorage and apply theme to document
        await JSRuntime.InvokeVoidAsync("setThemePreference", isDarkMode);

        // Apply the theme classes to the HTML element
        if (isDarkMode)
        {
            await JSRuntime.InvokeVoidAsync("eval", "document.documentElement.classList.add('dark')");
        }
        else
        {
            await JSRuntime.InvokeVoidAsync("eval", "document.documentElement.classList.remove('dark')");
        }
    }

    public async ValueTask DisposeAsync()
    {
        if (objRef is not null)
        {
            objRef.Dispose();
        }
    }
}
